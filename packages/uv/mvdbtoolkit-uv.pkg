015377MVDBTOOLKIT.BPþ0c00010ABMVDBTOOLKIT.WFILEIO.D3þ0c2      SUBROUTINE MVDBTOOLKIT.WFILEIO.D3(FOBJ)þ      **********************************************************************þ      *þ      * Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ      *þ      * Written by: Patrick Payne, Zumasysþ      * Date: June 7th 2018þ      * Description: WFILEIO MULTI PLATFORM WORKING WITH O/S FILESþ      *þ      **********************************************************************þ      *þ      * INOBJþ      *þ      * { "ACTION":"READ,WRTE,DELETE",þ      *   "PATH":"PATH TO THE FILE",þ      *   "DATA":"DATA FOR A WRITE",þ      *   "dosletter":"OPTIONAL DOS LETTER TO ADD TO PATH",þ      *   "NEWLINE":"CR,LF,CRLF,DOS,UNIX",þ      *   "PERMISSIONS":"TBD"þ      *   "response": {þ      *       "data":"responsedata",þ      *       "status":1-ok, else no,þ      *       "statusmsg":"statusmsg"þ      *   }þ      * }þ      *þ      * need to know the existing platformþþ      *PLATFORM.DELIM="\"þ      *PLATFORM.TYPE="WINDOWS"þ      *PLATFORM.MV="D3"þþ      INCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþ      þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.mvtype",PLATFORM.MV,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.filedelim",PLATFORM.DELIM,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.platform",PLATFORM.TYPE,"",RERR)þþ      FSTATUS=1þ      FSTATUSMSG="OK"þþ      CALL @WOBJ.RTNE(FOBJ,"GET","action",FILEIO.ACTION,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","path",FILEIO.PATH,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","data",FILEIO.DATA,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","dosletter",FILEIO.DOSLETTER,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","newline",FILEIO.NEWLINE,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","permissions",FILEIO.PERMISSIONS,"",RERR)þþ      *CALL @WOBJ.RTNE(OUTOBJ,"FROMSTRING","","{}","",RERR)þþ      FILEIO.ACTION=OCONV(FILEIO.ACTION,"MCU")þ      FILEIO.NEWLINE=OCONV(FILEIO.NEWLINE,"MCU")þþ      CALL @WOBJ.RTNE(FOBJ,"GET","work.parsed_fileio_file_name",PARSED.FILEIO.FILE.NAME,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.fileio_just_path",FILEIO.JUST.PATH,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.platform",PLATFORM.TYPE,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.mvtype",PLATFORM.MVTYPE,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","work.filedelim",PLATFORM.FILEDELIM,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","path",ORIG.PATH,"",RERR)þþþ      * FOR RIGHT NOW ON JBASE WE WILL JUST OPEN THE FILE USING FULL PATHINGþþ      * THIS DOES NOT DO ANYTHING!!!þ      BEGIN CASEþ         CASE PLATFORM.TYPE="WINDOWS"þ            REAL.PATH="dos:":PLATFORM.TYPEþ         CASE 1þ            REAL.PATH="unix:":PLATFORM.TYPEþ      END CASEþ      **þþþ      OPEN FILEIO.JUST.PATH TO FI ELSEþ         IF INDEX(FILEIO.JUST.PATH,"AppData\Local\Temp",1) OR INDEX(FILEIO.JUST.PATH,'\tmp',1) THENþ            * SPECIAL PATCH FOR D3/WINDOWS.  D3 is running as a system user and it appearsþ            * the Temp directory does not always existþ            EXECUTE '!mkdir ':FILEIO.JUST.PATHþ         ENDþ         OPEN FILEIO.JUST.PATH TO FI ELSEþ            FSTATUS=0þ            FSTATUSMSG="Could not open file ":FILEIO.JUST.PATHþ            GOTO end.of.runþ         ENDþ      ENDþþ      BEGIN CASEþ         CASE FILEIO.ACTION="READ"þ            GOSUB fileio.readþ         CASE FILEIO.ACTION="WRITE"þ            GOSUB fileio.writeþ         CASE FILEIO.ACTION="DELETE"þ            GOSUB fileio.deleteþ         CASE 1þ            FSTATUS=0þ            FSTATUSMSG="Invalid action"þ            GOTO end.of.runþ      END CASEþþend.of.run: *þ      CALL @WOBJ.RTNE(FOBJ,"SET.NUMBER", "response.status", FSTATUS,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"SET.STRING", "response.statusmsg", FSTATUSMSG, "", RERR)þþ      RETURNþþfileio.read: *þþ      REC=""þþ      READ REC FROM FI, PARSED.FILEIO.FILE.NAME ELSEþ         FSTATUS=0þ         FSTATUSMSG="Could not find ":PARSED.FILEIO.FILE.NAMEþ      ENDþþ      CALL @WOBJ.RTNE(FOBJ,"SET.STRING","response.data",REC,"",RERR)þþ      IF 0 THENþ         PRINT "PATH   :":FILEIO.JUST.PATHþ         PRINT "ID     :":PARSED.FILEIO.FILE.NAMEþ         PRINT "REC    :":RECþ      ENDþþ      RETURNþþfileio.write: *þþ      WRITE FILEIO.DATA ON FI, PARSED.FILEIO.FILE.NAMEþþ      RETURNþþfileio.delete: *þþ      DELETE FI, PARSED.FILEIO.FILE.NAMEþþ      RETURN002F4DMVDBTOOLKIT.TESTþ0c2PRINT @(-1):"MVDBTOOLKIT.TEST"þPRINTþþINCLUDE MVDBTOOLKIT.TEST.INCLUDEþþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþTEST.PLATFORM=FIELD(CMND,' ',2)þTEST.MVTYPE=FIELD(CMND,' ',3)þþCALL MVDBTOOLKIT.WPLATFORM(PLATFORM.OBJ)þþIF TEST.PLATFORM = "" THENþ   CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","platform",TEST.PLATFORM,"",RERR)þENDþIF TEST.MVTYPE = "" THENþ   CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","mvtype",TEST.MVTYPE,"",RERR)þENDþþIF TEST.PLATFORM = "" THENþ   PRINT "Enter Platform: ":; INPUT TEST.PLATFORMþENDþþIF TEST.MVTYPE = "" THENþ   PRINT "Enter MVType: ":; INPUT TEST.MVTYPEþENDþþIF TEST.PLATFORM='' OR TEST.MVTYPE='' THENþ    PRINT "Usage: MVDBTOOLKIT PLATFORM MVTYPE"þ    PRINTþ    PRINT "PLATFORM=WINDOWS or LINUX"þ    PRINT "MVTYPE=JBASE,D3,UNIVERSE,UNIDATA"þ    STOPþENDþþ* GET ENVIRONMENTþCALL MVDBTOOLKIT.WPLATFORM(PLATFORM.OBJ)þþCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","curllocation",CURLLOCATION,"",RERR)þþCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","platform",PLATFORM,"",RERR)þTEST='platform'; GOSUB start.testþTEST.MSG=PLATFORM:"=":TEST.PLATFORMþIF PLATFORM # TEST.PLATFORM THEN TEST.STATUS=0 ELSE TEST.STATUS=1þGOSUB end.testþþCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","mvtype",RESULT,"",RERR)þþþTEST='mvtype'; GOSUB start.testþTEST.MSG=RESULT:"=":TEST.MVTYPEþIF RESULT # TEST.MVTYPE THEN TEST.STATUS=0 ELSE TEST.STATUS=1þGOSUB end.testþCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","tmpdir",TMP.DIR,"",RERR)þCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","filedelim",FILEDELIM,"",RERR)þþTEST='filedelim'; GOSUB start.testþCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","filedelim",FILEDELIM,"",RERR)þTEST.MSG=FILEDELIMþTEST.STATUS=1þBEGIN CASEþ   CASE OCONV(PLATFORM,"MCU") = "LINUX" AND FILEDELIM="/"þ   CASE OCONV(PLATFORM,"MCU") = "WINDOWS" AND FILEDELIM="\"þ   CASE 1; TEST.STATUS=0þEND CASEþGOSUB end.testþþTEST='tmpdir'; GOSUB start.testþCALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","tmpdir",TMP.DIR,"",RERR)þTEST.MSG=TMP.DIRþTEST.STATUS=1þIF TMP.DIR="" THEN TEST.STATUS=0þGOSUB end.testþþþTEST='MVDBTOOLKIT.SWAP'þGOSUB start.testþS='TEST LINE TEST LINE'þORIG.STRING=SþCALL MVDBTOOLKIT.SWAP(S,"ES","XX")þIF S = "TXXT LINE TXXT LINE" THEN TEST.STATUS=1 ELSE TEST.STATUS=0þTEST.MSG=SþGOSUB end.testþþ* Test 1 GetenvþþTEST="getenv"þGOSUB start.testþCALL MVDBTOOLKIT.WGETENV("PATH",PATH)þIF PATH # "" THENþ    TEST.MSG=PATH[1,60]þ    TEST.STATUS=1þEND ELSEþ    TEST.MSG=""þ    TEST.STATUS=0þENDþGOSUB end.testþþ* Test WEXECUTEþþTEST="wexecute"; GOSUB start.testþCMND='echo MVDBTOOLKIT.TEST'þþCALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þCALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þCALL MVDBTOOLKIT.WEXECUTE(COBJ)þCALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþIF INDEX(CMND.RESULT,"MVDBTOOLKIT.TEST",1) THENþ    TEST.MSG=CMND.RESULTþ    TEST.STATUS=1þEND ELSEþ    TEST.MSG=CMND.RESULTþ    TEST.STATUS=0þENDþCONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþGOSUB end.testþþ* Test WFILEIOþþTEST="WFILEIO-WRITE"þþUSER.NO=FIELD(OCONV('','U50BB'),' ',1)þGOSUB start.testþCALL @WOBJ.RTNE(FOBJ,"FROMSTRING","","{}","",RERR)þCALL @WOBJ.RTNE(FOBJ,"SET","action","WRITE","",RERR)þTMP.FILE.NAME=TMP.DIR:FILEDELIM:'TMP-':USER.NO:'.txt'þTEST.MSG=TMP.FILE.NAMEþþCALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.FILE.NAME,"",RERR)þSAVE.FOBJ=FOBJþTMP.DATA=TIMEDATE()þCALL @WOBJ.RTNE(FOBJ,"SET","data",TMP.DATA,"",RERR)þCALL MVDBTOOLKIT.WFILEIO(FOBJ)þCALL @WOBJ.RTNE(FOBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","response.statusmsg",RESPONSE.STATUS.MSG,"",RERR)þTEST.STATUS=RESPONSE.STATUSþIF NOT(RESPONSE.STATUS) THEN TEST.MSG:=RESPONSE.STATUS.MSGþGOSUB end.testþþIF NOT(TEST.STATUS) THEN STOP "Test Failed, no reason to continue"þþTEST='WFILEIO-READ'þGOSUB start.testþþ* NOW READ IT BACK INþCALL @WOBJ.RTNE(FOBJ,"SET","action","READ","",RERR)þCALL MVDBTOOLKIT.WFILEIO(FOBJ)þCALL @WOBJ.RTNE(FOBJ,"GET","response.data",RESPONSE.DATA,"",RERR)þþTEST.MSG="(":TMP.DATA:')=(':RESPONSE.DATA:")"þTEST.STATUS=1þIF TMP.DATA # RESPONSE.DATA THEN TEST.STATUS=0þGOSUB end.testþþTEST="WFILEIO-DELETE"; GOSUB start.testþFOBJ=SAVE.FOBJþCALL @WOBJ.RTNE(FOBJ,"SET","action","DELETE","",RERR)þCALL MVDBTOOLKIT.WFILEIO(FOBJ)þþFOBJ=SAVE.FOBJþCALL @WOBJ.RTNE(FOBJ,"SET","action","READ","",RERR)þCALL MVDBTOOLKIT.WFILEIO(FOBJ)þRESPONSE.DATA=""þþCALL @WOBJ.RTNE(FOBJ,"GET","response.data",RESPONSE.DATA,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","response.statusmsg",RESPONSE.STATUSMSG,"",RERR)þTEST.STATUS=1þTEST.MSG=TMP.FILE.NAME:' ':RESPONSE.STATUSþIF RESPONSE.STATUS=0 AND RESPONSE.DATA="" THEN NULL ELSE TEST.STATUS=0þGOSUB end.testþþ* Let get our current directoryþTEST="pwd"; GOSUB start.testþIF OCONV(PLATFORM,"MCU") = "WINDOWS" THENþ   CMND='echo %CD%'þEND ELSEþ   CMND='pwd'þENDþþCALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þCALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þCALL MVDBTOOLKIT.WEXECUTE(COBJ)þCALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþIF 1 THENþ    TEST.MSG=CMND.RESULTþ    TEST.STATUS=1þEND ELSEþ    TEST.MSG=CMND.RESULTþ    TEST.STATUS=0þENDþCONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþGOSUB end.testþþMVDBTOOLKIT.LOCATION = CMND.RESULTþþIF 0 THENþ* Lets verify we have curl!!!þIF CURLLOCATION="" THEN CURLLOCATION="curl"þþTEST="default curl"; GOSUB start.testþCMND=CURLLOCATION:' -V'þþCALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þCALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þCALL MVDBTOOLKIT.WEXECUTE(COBJ)þCALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþBEGIN CASEþ   CASE INDEX(CMND.RESULT,"libcurl",1) AND 0þ    TEST.MSG=CMND.RESULTþ    TEST.STATUS=1þ   CASE OCONV(PLATFORM,"MCU")="WINDOWS"þ    TEST.MSG=CMND.RESULTþ    TEST.STATUS=2þ   CASE 1þ    TEST.MSG=0þEND CASEþþCONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþGOSUB end.testþþ* Start looking for curlþIF TEST.STATUS=2 THENþ   CURLLOCATION="c:\progra~1\git\mingw64\bin\curl.exe"þ   TEST="git curl"; GOSUB start.testþ   CMND=CURLLOCATION:' -V'þþ   CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ   CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ   CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ   CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ   BEGIN CASEþ      CASE INDEX(CMND.RESULT,"libcurl",1) AND 0þ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=1þ      CASE OCONV(PLATFORM,"MCU")="WINDOWS"þ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=2þ      CASE 1þ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=0þ   END CASEþþ   CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ   GOSUB end.testþENDþþIF TEST.STATUS=2 THENþ   CURLLOCATION=MVDBTOOLKIT.LOCATION:"\mvdbtoolkit\curl\windows64\curl.exe"þ   TEST="mvdbtoolkit curl"; GOSUB start.testþ   CMND=CURLLOCATION:' -V'þþ   CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ   CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ   CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ   CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ   BEGIN CASEþ      CASE INDEX(CMND.RESULT,"libcurl",1) AND 0þ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=1þ       CASE 1þ         TEST.STATUS=0þ         TEST.MSG=CMNDþþ   END CASEþþ   CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ   GOSUB end.testþENDþENDþþTEST="WCALL"þGOSUB start.testþþCALL @WOBJ.RTNE(OBJ,"FROMSTRING","","{}","",RERR)þþ CALL @WOBJ.RTNE(OBJ,"SET","method","POST","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","debug","N","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","url","https://httpbin.org/anything?field1=value1","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","insecure","Y","",RERR)þ þ CALL @WOBJ.RTNE(OBJ,"SET.OBJECT","headers","{}","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","headers.X-TEST-HEADER","headertest","",RERR)þ þ CALL @WOBJ.RTNE(OBJ,"SET.ARRAY","formfields","[]","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET.OBJECT","formfields[-1]","{}","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","formfields[0].name","field2","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","formfields[0].value","VALUE2$","",RERR)þþ CALL @WOBJ.RTNE(SOBJ,"FROMSTRING","","{}","",RERR)þ CALL @WOBJ.RTNE(SOBJ,"SET","name","field3","",RERR)þ CALL @WOBJ.RTNE(SOBJ,"SET","value","<EXAMPLE HTML>","",RERR)þ CALL @WOBJ.RTNE(SOBJ,"TOSTRING","",SJSON,"",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET.OBJECT","formfields[-1]",SJSON,"",RERR)þþ CALL MVDBTOOLKIT.WCALL(OBJ)þþ CALL @WOBJ.RTNE(OBJ,"GET","response.data",RESPONSE,"",RERR)þ OPEN "MVDBTOOLKIT.BP" TO FILE ELSE STOPþ *PRINT "RESPONSE=":RESPONSEþ WRITE RESPONSE ON FILE, "MVDBTOOLKIT.TEST.JSON"þ CALL @WOBJ.RTNE(OBJ,"TOSTRING","",OUT.JSON,"PRETTIFY",RERR)þ WRITE OUT.JSON ON FILE, "MVDBTOOLKIT.WCALL.JSON"þþ þ CALL @WOBJ.RTNE(OBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þ *PRINT 'RESPONSE.STATUS=':RESPONSE.STATUS:'  ':þ *IF RESPONSE.STATUS="200" THEN PRINT "OK" ELSE PRINT "FAIL"þ TEST.MSG=RESPONSE.STATUSþ IF RESPONSE.STATUS="200" THENþ    TEST.STATUS=1þ END ELSEþ    TEST.STATUS=0þ ENDþ GOSUB end.testþþ TEST='WCALL.HTTPTYPE'þ GOSUB start.testþ CALL @WOBJ.RTNE(OBJ,"GET","response.http_type",RESPONSE.HTTP.TYPE,"",RERR)þ *PRINT 'RESPONSE.HTTP_TYPE=':RESPONSE.HTTP.TYPEþ TEST.MSG=RESPONSE.HTTP.TYPEþ IF INDEX(TEST.MSG,'HTTP/',1) THENþ    TEST.STATUS=1þ END ELSEþ    TEST.STATUS=0þ ENDþ GOSUB end.testþ CALL @WOBJ.RTNE(ROBJ,"FROMSTRING","",RESPONSE,"",RERR)þþ TEST="WCALL.FIELD1"þ GOSUB start.testþ CALL @WOBJ.RTNE(ROBJ,"GET","args.field1",VALUE,"",RERR)þ TEST.MSG=VALUEþ IF TEST.MSG="value1" THEN TEST.STATUS=1 ELSE TEST.STATUS=0þ GOSUB end.testþþþTEST="WCALL.field2"þ GOSUB start.testþ CALL @WOBJ.RTNE(ROBJ,"GET","form.field2",VALUE,"",RERR)þ TEST.MSG=VALUEþ IF TEST.MSG="VALUE2$" THEN TEST.STATUS=1 ELSE TEST.STATUS=0þ GOSUB end.testþþTEST="WCALL.field3"þ GOSUB start.testþ CALL @WOBJ.RTNE(ROBJ,"GET","form.field3",VALUE,"",RERR)þ TEST.MSG=VALUEþ IF TEST.MSG="<EXAMPLE HTML>" THEN TEST.STATUS=1 ELSE TEST.STATUS=0þ GOSUB end.testþþþ TEST="WCALL.HEADER"þ GOSUB start.testþ CALL @WOBJ.RTNE(ROBJ,"GET","headers.X-Test-Header",VALUE,"",RERR)þ TEST.MSG=VALUEþ IF TEST.MSG="headertest" THEN TEST.STATUS=1 ELSE TEST.STATUS=0þ GOSUB end.testþþTEST="WCALL.BODY"þGOSUB start.testþþ CALL @WOBJ.RTNE(OBJ,"FROMSTRING","","{}","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","method","POST","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","debug","N","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","url","https://httpbin.org/anything?field1=value1","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","insecure","N","",RERR)þþ CALL @WOBJ.RTNE(OBJ,"SET.OBJECT","headers","{}","",RERR)þ CALL @WOBJ.RTNE(OBJ,"SET","Content-Type","application/json","",RERR)þ þ CALL @WOBJ.RTNE(TESTOBJ,"FROMSTRING","","{}","",RERR)þ CALL @WOBJ.RTNE(TESTOBJ,"SET","test","value","",RERR)þ CALL @WOBJ.RTNE(TESTOBJ,"TOSTRING","",TESTJSON,"PRETTIFY",RERR)þþ CALL @WOBJ.RTNE(OBJ,"SET.STRING","body",TESTJSON,"",RERR)þ þ CALL MVDBTOOLKIT.WCALL(OBJ)þþ CALL @WOBJ.RTNE(OBJ,"GET","response.data",RESPONSE,"",RERR)þ þ WRITE RESPONSE ON FILE, "MVDBTOOLKIT.TESTBODY.JSON"þ CALL @WOBJ.RTNE(OBJ,"TOSTRING","",OUT.JSON,"PRETTIFY",RERR)þ WRITE OUT.JSON ON FILE, "MVDBTOOLKIT.WCALLBODY.JSON"þþþ CALL @WOBJ.RTNE(OBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þ *PRINT 'RESPONSE.STATUS=':RESPONSE.STATUS:'  ':þ *IF RESPONSE.STATUS="200" THEN PRINT "OK" ELSE PRINT "FAIL"þ TEST.MSG=RESPONSE.STATUSþ IF RESPONSE.STATUS="200" THENþ    TEST.STATUS=1þ END ELSEþ    TEST.STATUS=0þ ENDþ GOSUB end.testþþ TEST="WCALL.BODY.RESULT"þ GOSUB start.testþ * The testing web site does not send raw body back very wellþ * we will just look for what we expectþ CONVERT CHAR(254):CHAR(253):CHAR(252):CHAR(10):CHAR(13) TO '' IN RESPONSEþ POS=INDEX(RESPONSE,'"form"',1)þ IF POS THEN RESPONSE=RESPONSE[POS,9999]þ TEST.MSG=RESPONSEþ IF INDEX(RESPONSE,'"test',1) AND INDEX(RESPONSE,'"value',1) THENþ     TEST.STATUS=1þ END ELSEþ     TEST.STATUS=0þ ENDþ GOSUB end.testþ þSTOPþ*þGOSUB start.testþRETURNþ*þprocess.error: *þIF RERR<1> THENþ   TEST.STATUS=-1þ   TEST.MSG=RERR<1>þENDþRETURNþ*þ*þstart.test: *þTEST.STATUS=0þTEST.MSG="Success"þPRINT "":TEST[1,15]"L(#15)":þRETURNþ*þend.test: *þPRINT "  ":TEST.MSG[1,50]"L(#50)":þPRINT " ":þPRE=''; AFT=''þBEGIN CASEþ   CASE TEST.STATUS=2; ERROR="Warning"; PRE=''; AFT=''þ   CASE TEST.STATUS; ERROR="Passed"þ   CASE 1; ERROR="Passed"; PRE=@(-13); AFT=@(-14)þEND CASEþPRINT PRE:"[":þPRINT ERROR"L(#7)":þPRINT "]":AFTþRETURNþþþ 00131FMVDBTOOLKIT.WFILEIOþ0c2SUBROUTINE MVDBTOOLKIT.WFILEIO(INOBJ)þ**********************************************************************þ*þ* Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: June 7th 2018þ* Description: WFILEIO MULTI PLATFORM WORKING WITH O/S FILESþ*þ**********************************************************************þ*þ* INOBJþ*þ* { "ACTION":"READ,WRITE,DELETE",þ*   "PATH":"PATH TO THE FILE",þ*   "DATA":"DATA FOR A WRITE",þ*   "dosletter":"OPTIONAL DOS LETTER TO ADD TO PATH",þ*   "NEWLINE":"CR,LF,CRLF,DOS,UNIX",þ*   "PERMISSIONS":"TBD"þ*   "response": {þ*       "data":"responsedata",þ*       "status":1-ok, else no,þ*       "statusmsg":"statusmsg" þ*   }þ* }þ*þ* need to know the existing platformþþ*PLATFORM.DELIM="\"þ*PLATFORM.TYPE="WINDOWS"þ*PLATFORM.MV="D3"þþCALL MVDBTOOLKIT.WPLATFORM(POBJ)þþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþCALL @WOBJ.RTNE(POBJ,"GET","mvtype",PLATFORM.MV,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","filedelim",PLATFORM.DELIM,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","platform",PLATFORM.TYPE,"",RERR)þþFSTATUS=1þFSTATUSMSG="OK"þþCALL @WOBJ.RTNE(INOBJ,"GET","action",FILEIO.ACTION,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"GET","path",FILEIO.PATH,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"GET","data",FILEIO.DATA,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"GET","dosletter",FILEIO.DOSLETTER,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"GET","newline",FILEIO.NEWLINE,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"GET","permissions",FILEIO.PERMISSIONS,"",RERR)þþ*CALL @WOBJ.RTNE(OUTOBJ,"FROMSTRING","","{}","",RERR)þCALL @WOBJ.RTNE(INOBJ,"SET.OBJECT","response","{}","",RERR)þþFILEIO.ACTION=OCONV(FILEIO.ACTION,"MCU")þFILEIO.NEWLINE=OCONV(FILEIO.NEWLINE,"MCU")þþIF FILEIO.ACTION = "" THENþ    FSTATUS=0þ    FSTATUSMSG="No action defined"þ    GOTO end.of.runþENDþþIF FILEIO.PATH = "" THENþ    FSTATUS=0þ    FSTATUSMSG="No path defined"þ    GOTO end.of.runþENDþþPARSED.FILEIO.PATH=""þL=LEN(FILEIO.PATH)þFOR X=1 TO Lþ   C=FILEIO.PATH[X,1]þ   IF C=PLATFORM.DELIM THENþ      PARSED.FILEIO.PATH:=@AMþ   END ELSEþ      PARSED.FILEIO.PATH:=Cþ   ENDþNEXT Xþþ*PARSED.FILEIO.PATH=EXCHANGE(FILEIO.PATH,PLATFORM.DELIM,@AM)þPARSED.FILEIO.PATH=FILEIO.PATHþCONVERT PLATFORM.DELIM TO @AM IN PARSED.FILEIO.PATHþPARSED.FILEIO.PARTS=DCOUNT(PARSED.FILEIO.PATH,@AM)þþ* JBASE DOES NOT APPEAR TO HONOR WINDOWS ENVIROMENT VARIABLES IN THE OPENþ* THIS IS MAKING %USERPROFILE% NOT WORKþ*þ* WE ARE GOING TO LOOP THRU THE THE PARTS AN EXPAND THEM OURSELVESþ*þ* THIS HAS BEEN TESTED ON JBASE WINDOWS SO FAR.þ*þFOR P=1 TO PARSED.FILEIO.PARTSþ    THIS.PART=PARSED.FILEIO.PATH<P>þ    IF THIS.PART[1,1]='%' OR THIS.PART[1,1]="$" THENþ        CONVERT '%$' TO '' IN THIS.PARTþ * 9/4/2019 PAP Modified this to use mvdbtoolkit.wgetenvþ þ *       IF GETENV(THIS.PART,NEW.THIS.PART) THENþ *           PARSED.FILEIO.PATH<P>=NEW.THIS.PARTþ *       ENDþ         CALL MVDBTOOLKIT.WGETENV(THIS.PART,NEW.THIS.PART)þ         IF NEW.THIS.PART # "" THEN PARSED.FILEIO.PATH<P>=NEW.THIS.PARTþ    ENDþNEXT PþþþPARSED.FILEIO.FILE.NAME=PARSED.FILEIO.PATH<PARSED.FILEIO.PARTS>þFILEIO.JUST.PATH=DELETE(PARSED.FILEIO.PATH,PARSED.FILEIO.PARTS)þ*FILEIO.JUST.PATH=EXCHANGE(FILEIO.JUST.PATH,@AM,PLATFORM.DELIM)þþCONVERT @AM TO PLATFORM.DELIM IN FILEIO.JUST.PATHþþþCALL @WOBJ.RTNE(INOBJ,"SET.OBJECT","work","{}","",RERR)þCALL @WOBJ.RTNE(INOBJ,"SET","work.parsed_fileio_file_name",PARSED.FILEIO.FILE.NAME,"",RERR)þþCALL @WOBJ.RTNE(INOBJ,"SET","work.fileio_just_path",FILEIO.JUST.PATH,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"SET","work.platform",PLATFORM.TYPE,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"SET","work.mvtype",PLATFORM.MV,"",RERR)þCALL @WOBJ.RTNE(INOBJ,"SET","work.filedelim",PLATFORM.DELIM,"",RERR)þþCALL @WOBJ.RTNE(INOBJ,"SET.OBJECT","response","{}","",RERR)þ* lets have a seperate routine for each platformþþBEGIN CASEþ    CASE FILEIO.ACTION="READ"þ    CASE FILEIO.ACTION="WRITE"þ    CASE FILEIO.ACTION="DELETE"þ    CASE 1þ        FSTATUS=0þ        FSTATUSMSG="Invalid action"þ        CALL @WOBJ.RTNE(INOBJ,"SET.NUMBER", "response.status", FSTATUS,"",RERR)þ        CALL @WOBJ.RTNE(INOBJ,"SET.STRING", "response.statusmsg", FSTATUSMSG, "", RERR)þ        GOTO end.of.runþEND CASEþþBEGIN CASEþ    CASE PLATFORM.MV="D3"þ        FILEIO.RTNE="MVDBTOOLKIT.WFILEIO.D3"þ        CALL MVDBTOOLKIT.WFILEIO.D3(INOBJ)þ    CASE PLATFORM.MV="JBASE"þ        FILEIO.RTNE="MVDBTOOLKIT.W.FILEIO.JBASE"þ        CALL MVDBTOOLKIT.WFILEIO.JBASE(INOBJ)þ    CASE PLATFORM.MV="UNIVERSE"þ        FILEIO.RTNE="MVDBTOOLKIT.WFILEIO.UNIVERSE"þ        CALL MVDBTOOLKIT.WFILEIO.UNIVERSE(INOBJ)þ    CASE PLATFORM.MV="UNIDATA"þ        FILEIO.RTNE="MVDBTOOLKIT.WFILEIO.UNIDATA"þ        CALL MVDBTOOLKIT.WFILEIO.UNIDATA(INOBJ)þ    CASE PLATFORM.MV="QM"þ        * QM SUPPORTS OPENPATHþ        CALL MVDBTOOLKIT.WFILEIO.QM(INOBJ)þ   CASE 1þ        DEBUGþ        FSTATUS=0þ        FSTATUSMSG="Invalid Platform ":PLATFORM.MVþ        GOTO end.of.runþEND CASEþþend.of.run: *þþRETURN002BEFMVDBTOOLKIT.APP.INSTALLERþ0c2*þ* Copyright (C) 2009 Sierra Bravo Corporation, All Rights Reservedþ*þ* Written by: Luke Bucklin, Sierra Bravo Corporationþ* Date: 07/15/2009þ* Description: Application installerþ*þ* Modified By: Dave Bucklin, Nerdery Interactive Labsþ* Date: 02/04/2011þ* Description: Add overwrite flag, clashes handling specific to MVDashboardþ*þ* Modified By: Mike Street, Zumasysþ* Date: 07/17/2015þ* Description: Adapt for UniVerseþ*þ*þ    BUFFER = ""þ*þ    INSTALL.LOG.ON = 0þ    INSTALL.LOG.ID = "INSTALL*":DATE():"*":TIME()þ    INSTALL.LOG = ""þ    PROCESS.STATUS = 0þ    OVR.FLAG = 0þ    PROMPT ""þ    PRINT "File path: ":    þ    INPUT PACKAGE.FILEþ    IF PACKAGE.FILE = "VERSION" THENþ        PRINTþ        PRINT "Installer Version"þ        PRINT "1.0"þ        STOPþ    ENDþ*þ    returnCode = ""þ*þ    OPENSEQ PACKAGE.FILE TO HANDLE ELSEþ        PRINT "Unable to open sequential file"þ        STOPþ    ENDþ*UV   HANDLE = %OPEN(PACKAGE.FILE,O$RDONLY+O$BINARY)þ*UV   IF NOT(HANDLE) THENþ*UV       PRINT "Unable to open file." ; STOPþ*UV   ENDþ*þ    L = 0þ    PACKET = ""þ    LOOP    þ*UV     L = %READ(HANDLE,BUFFER,10000)þ*UVþ        READBLK BUFFER FROM HANDLE, 10000 ELSEþ   IF PACKET = '' THENþ      CRT 'CANT READ BUFFER'þ      STOPþ    ENDþ   BUFFER=''þ ENDþ        L=LEN(BUFFER)þ*END UV*þ    WHILE L > 0 DOþ        PACKET := BUFFERþ    REPEATþ    IF PACKET = "" THENþ        PRINT "No package."þ        STOPþ    ENDþ    INSTALL.ID = TIMEDATE()þ    KEEP.SOURCE = "1"þ*þ    PRINTþ    PRINT "Installing..."þ*þ    OPEN '','MV.PACKED.FILE' TO F.PACKED.FILE ELSEþ        CMD = "CREATE-FILE MV.PACKED.FILE 1 31"þ        GOSUB EXEC.CMDþ        OPEN '','MV.PACKED.FILE' TO F.PACKED.FILE ELSEþ            ERRFILE = "MV.PACKED.FILE"þ            GOSUB OPEN.ERRþ            STOPþ        ENDþ    ENDþ    WRITE PACKET ON F.PACKED.FILE, "PACKAGE"þþ    OPEN '','VOC' TO F.MD ELSEþ        ERRFILE = "VOC"þ        GOSUB OPEN.ERRþ        STOPþ    ENDþ    OPEN "MV.INSTALL" TO F.INSTALL ELSEþ        CMD = "CREATE-FILE MV.INSTALL 1 11"þ        GOSUB EXEC.CMDþ        OPEN "MV.INSTALL" TO F.INSTALL ELSEþ            ERRFILE = "MV.INSTALL"þ            GOSUB OPEN.ERRþ            STOPþ        ENDþ    ENDþ    OPEN "MV.INSTALL.CF" TO F.INSTALL.CF ELSEþ        CMD = "CREATE-FILE MV.INSTALL.CF 1 11"þ        GOSUB EXEC.CMDþ        OPEN "MV.INSTALL.CF" TO F.INSTALL.CF ELSEþ            ERRFILE = "MV.INSTALL.CF"þ            GOSUB OPEN.ERRþ            STOPþ        ENDþ    ENDþ    OPEN "MVAPPS.INSTALLED" TO F.MVAPPS.INSTALLED ELSEþ        CMD = "CREATE-FILE MVAPPS.INSTALLED 3 31"þ        GOSUB EXEC.CMDþ        OPEN "MVAPPS.INSTALLED" TO F.MVAPPS.INSTALLED ELSEþ            ERRFILE = "MVAPPS.INSTALLED"þ            GOSUB OPEN.ERRþ            STOPþ        ENDþ    ENDþ    OPEN "DICT","MVDB.CLASHES" TO FD.MVDB.CLASHES ELSEþ        CMD = "CREATE-FILE DICT MVDB.CLASHES 3"þ        GOSUB EXEC.CMDþ    ENDþ    INSTALL.LOG.ON = 1þ*þ    CLEARFILE F.INSTALLþ    DELETE F.INSTALL.CF, "MVAPPS-PRE-SCRIPT"      ;* Get rid of this just in case one is left overþ    DELETE F.INSTALL.CF, "MVAPPS-POST-SCRIPT"þ    DELETE F.INSTALL.CF, "PACKAGE.INFO"þ    TARGET = F.INSTALLþ    TARGET.NAME = "MV.INSTALL"þ    GOSUB UNPACKþ* All individual file packages are now in INSTALLþ* Unpack the MD scriptsþ    READ PACKET FROM F.INSTALL, "MV.INSTALL.CF" THENþ        TARGET = F.INSTALL.CFþ        TARGET.NAME = "MV.INSTALL.CF"þ        GOSUB UNPACKþ        DELETE F.INSTALL, "MV.INSTALL.CF"þ    ENDþ*þ* Execute scripts that are required prior to compilationþ*þ    READ CMD FROM F.INSTALL.CF, "MVAPPS-PRE-SCRIPT" THENþ        LOG.LINE = TIMEDATE():": Processing PRE-INSTALL commands..."þ        INSTALL.LOG<-1> = LOG.LINEþ* Execute commands that need to be run before the install process beginsþ        GOSUB EXEC.CMDþ        LOG.LINE = TIMEDATE():": Completed PRE-INSTALL commands."þ        INSTALL.LOG<-1> = LOG.LINEþ    ENDþ    READ PACKAGE.INFO FROM F.INSTALL.CF, "PACKAGE.INFO" ELSE PACKAGE.INFO = ""þ    PACKAGE.ID = PACKAGE.INFO<6>þ    PACKAGE.INFO<4> = DATE()þ    PACKAGE.INFO<5> = TIME()þ*þ    SELECT F.INSTALLþ    LOOPþ        READNEXT PKG.ID ELSE EXITþ        IF PKG.ID # "" THENþ            READ PACKET FROM F.INSTALL, PKG.ID THENþ                TARGET.FILE = FIELD(PKG.ID," ",1)þ                IF TARGET.FILE[1,7] = "BINARY:" THEN TARGET.FILE=TARGET.FILE[8,999]        ;*UVþ                DICT.MOD = FIELD( PKG.ID," ",2)þ                DATA.MOD = FIELD( PKG.ID," ",3)þ                DICT = ""þ                IF FIELD( PKG.ID,'_',1 ) = "DICT" THENþ                    TARGET.FILE = FIELD( PKG.ID, '_', 2 )þ                    IF TARGET.FILE[1,7] = "BINARY:" THEN TARGET.FILE=TARGET.FILE[8,999]    ;*UVþ                    DICT = "DICT"þ                ENDþ                OPEN DICT,TARGET.FILE TO F.TARGET ELSEþ                    IF NOT(INDEX(TARGET.FILE,':',1)) THENþ                        IF DICT.MOD = "" THEN DICT.MOD = 3þ                        IF DATA.MOD = "" THEN DATA.MOD = 31þ                        CMD = "CREATE-FILE ":TARGET.FILE:" ":DICT.MOD:" ":DATA.MODþ                        GOSUB EXEC.CMDþ                    ENDþ                    OPEN DICT,TARGET.FILE TO F.TARGET ELSEþ                        PRINT "Unable to create file ":TARGET.FILEþ                        GOSUB CLEANUPþ                        STOPþ                    ENDþ                ENDþ                TARGET = F.TARGETþ                TARGET.NAME = TRIM(DICT:" ":TARGET.FILE)þ                GOSUB UNPACKþ            ENDþ        ENDþ    REPEATþ*þ* Execute script required post compilationþ*þ    READ CMD FROM F.INSTALL.CF, "MVAPPS-POST-SCRIPT" THENþ        LOG.LINE = TIMEDATE():": Processing POST-INSTALL commands..."þ        INSTALL.LOG<-1> = LOG.LINEþ* Use compile options if they are present.þ        OPEN 'MVDB.CONTROL' TO F.MVDB.CONTROL THENþ            READ COMPILE.SETUP FROM F.MVDB.CONTROL, 'COMPILE.SETUP' THENþ                COMPILE.VERB = FIELD(COMPILE.SETUP<1>,' ',1)þ                IF COMPILE.VERB # '' THENþ                    OPTS = FIELD(COMPILE.SETUP<1>,'(',2)þ                    IF OPTS # '' THEN OPTS = "(":OPTSþ                    CMD.CNT = DCOUNT( CMD, @AM )þ                    FOR CMD.XX = 1 TO CMD.CNTþ                        IF FIELD(CMD<CMD.XX>,' ',1) = 'BASIC' OR FIELD(CMD<CMD.XX>,' ',1) = 'COMPILE' THENþ*make sure we use the right verb and options from the compile.setupþ                            CMD<CMD.XX> = COMPILE.VERB:' ':CMD<CMD.XX>[INDEX(CMD<CMD.XX>,' ',1)+1,999]:' ':OPTSþ                        ENDþ                    NEXT CMD.XXþ                ENDþ            ENDþ        ENDþ* Execute commands that need to be run at the end of the install processþ        GOSUB EXEC.CMDþ        LOG.LINE = TIMEDATE():": Completed POST-INSTALL commands."þ        INSTALL.LOG<-1> = LOG.LINEþ    ENDþ*þ*UV*    IF NOT(KEEP.SOURCE) THENþ*UV*        FOR X = 1 TO DCOUNT( SOURCE.FILES, @AM )þ*UV*            CMD = "CLEAR-FILE DATA ":SOURCE.FILES<X>þ*UV*            GOSUB EXEC.CMDþ*UV*        NEXT Xþ*UV*    ENDþ    READ INSTALL.LIST FROM F.INSTALL.CF, "LAST.INSTALL" ELSE INSTALL.LIST = ""þ    INSTALL.LIST = INSERT( INSTALL.LIST, 1, 0, 0, INSTALL.ID )þ    WRITE INSTALL.LIST ON F.INSTALL.CF, "LAST.INSTALL"þ    GOSUB CLEANUPþ    INSTALL.LOG<-1> = TIMEDATE():": Install complete."þ    WRITE INSTALL.LOG ON F.INSTALL.CF, INSTALL.LOG.IDþ    WRITE PACKAGE.INFO ON F.MVAPPS.INSTALLED, PACKAGE.IDþ    PROCESS.STATUS = 1þ    GOSUB SEND.DATAþ    STOPþ*********þUNPACK:   *þ*********þ    PRINT "Unpacking ":TARGET.NAME:"... ":þ*þ    BYTES = 0þ    CNT = 0þ    LOOPþ        PLENGTH = OCONV( PACKET[1,6], 'MCXD' )þ        REC = PACKET[7,PLENGTH]þ        PACKET = PACKET[PLENGTH+7,9999999]þ        ID = REC<1>þ        REC = DELETE( REC, 1, 0, 0 )þ        TYP = REC[1,2]þ        OVR.FLAG = REC[3,1]þ        REC = REC[4,9999999]þ        IF TYP = "0x" THENþ            REC = OCONV( REC, 'MY' )þ            END ELSE IF TYP # "0c" THENþ                REC = TYP:RECþ            ENDþ*þ            CNT += 1þ            BYTES += LEN(REC)þ            IF OVR.FLAG THENþ                IF DICT = "" THENþ*If we're not installing DICT items, compare for CLASHESþ                    READ CLASH FROM TARGET, ID THENþ                        BEGIN CASEþ*Preserve dashboard user passwordsþ                        CASE TARGET.FILE = "MVDB.USERS"þ                            IF CLASH<1> # REC<1> THEN REC<1> = CLASH<1>þ*Preserve dashboard access profileþ                        CASE TARGET.FILE = "MVDB.DEFS"þ                            IF CLASH<5> # REC<5> THEN REC<5> = CLASH<5>þ*Preserve widget access profileþ                        CASE TARGET.FILE = "MVDB.WIDGETS"þ                            IF CLASH<2> # REC<2> THEN REC<2> = CLASH<2>þ*Preserve widget compile optionþ                        CASE TARGET.FILE = "MVDB.CONTROL" AND ID = "COMPILE.SETUP"þ                            IF CLASH<1> # REC<1> THEN REC<1> = CLASH<1>þ                        END CASEþ                        IF CLASH # '' AND REC # CLASH THENþ                            CLASH.NAME = TARGET.NAMEþ                            CONVERT " " TO "_" IN CLASH.NAMEþ                            OPEN 'MVDB.CLASHES,':CLASH.NAME TO F.CLASHES ELSEþ                                CMD = "CREATE-FILE DATA MVDB.CLASHES,":CLASH.NAME:" 7"þ                                GOSUB EXEC.CMDþ                                OPEN 'MVDB.CLASHES,':CLASH.NAME TO F.CLASHES ELSEþ                                    PRINT "Unable to create file MVDB.CLASHES,":CLASH.NAMEþ                                    GOSUB CLEANUPþ                                    STOPþ                                ENDþ                            ENDþ                            WRITE CLASH ON F.CLASHES, IDþ                            CLOSE F.CLASHESþ                        ENDþ                    ENDþ                ENDþ                WRITE REC ON TARGET, IDþ            END ELSEþ                READ TST FROM TARGET, ID ELSEþ                    WRITE REC ON TARGET, IDþ                ENDþ            ENDþ            IF NOT(MOD(CNT,500)) THEN PRINT "*":þ        UNTIL PACKET = "" DO REPEATþ        IF CNT # 1 THEN PLURAL = "s" ELSE PLURAL = ""þ        PRINT CNT:" record":PLURAL:"."þ        LOG.LINE = TIMEDATE():": UNPACKED ":CNT:" RECORDS TO ":TARGET.NAMEþ        INSTALL.LOG<-1> = LOG.LINEþ        RETURNþ**********þCLEANUP:  *þ**********þ        CLEARFILE F.INSTALLþ        CLEARFILE F.PACKED.FILEþ        RETURNþ*þEXEC.CMD: *þ*þ        CMD.CNT = DCOUNT( CMD, @AM )þ        FOR CMD.XX = 1 TO CMD.CNTþ            THIS.CMD = CMD<CMD.XX>þ            LOG.LINE = TIMEDATE():": EXEC: ":THIS.CMDþ            INSTALL.LOG<-1> = LOG.LINEþ            CRT "Executing   ":THIS.CMDþ            EXECUTE THIS.CMDþ            IF INSTALL.LOG.ON THENþ                WRITE INSTALL.LOG ON F.INSTALL.CF, INSTALL.LOG.IDþ            ENDþ        NEXT CMD.XXþ        RETURNþ*þOPEN.ERR: *þ*þ        LOG.LINE = TIMEDATE():": FILE OPEN ERROR: ":ERRFILEþ        INSTALL.LOG<-1> = LOG.LINEþ        PRINT LOG.LINEþ        GOSUB SEND.DATAþ        RETURNþ*þSEND.DATA:*þ*þ        PRINTþ        IF PROCESS.STATUS = 1 THEN INSTALL.STATUS = "Success" ELSE INSTALL.STATUS = "Failed"þ        PRINT "Install process finished. Status: ":INSTALL.STATUSþ        RETURNþ    END000D13MVDBTOOLKIT.WFILEIO.UNIVERSEþ0c2SUBROUTINE MVDBTOOLKIT.WFILEIO.UNIVERSE(FOBJ)þ**********************************************************************þ*þ* Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: June 7th 2018þ* Description: WFILEIO MULTI PLATFORM WORKING WITH O/S FILESþ*þ**********************************************************************þ*þ* INOBJþ*þ* { "ACTION":"READ,WRTE,DELETE",þ*   "PATH":"PATH TO THE FILE",þ*   "DATA":"DATA FOR A WRITE",þ*   "dosletter":"OPTIONAL DOS LETTER TO ADD TO PATH",þ*   "NEWLINE":"CR,LF,CRLF,DOS,UNIX",þ*   "PERMISSIONS":"TBD",þ*   "debug":"Y or N",þ*   "response": {þ*       "data":"responsedata",þ*       "status":1-ok, else no,þ*       "statusmsg":"statusmsg" þ*   }þ* }þ*þ* need to know the existing platformþþ*PLATFORM.DELIM="\"þ*PLATFORM.TYPE="WINDOWS"þ*PLATFORM.MV="D3"þþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþCALL @WOBJ.RTNE(FOBJ,"GET","debug",DO.DEBUG,"",RERR)þIF OCONV(DO.DEBUG[1,1],"MCU") = "Y" OR DO.DEBUG="1" THEN DO.DEBUG=1 ELSE DO.DEBUG=""þþCALL @WOBJ.RTNE(FOBJ,"GET","work.mvtype",PLATFORM.MV,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","work.filedelim",PLATFORM.DELIM,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","work.platform",PLATFORM.TYPE,"",RERR)þþFSTATUS=1þFSTATUSMSG="OK"þþCALL @WOBJ.RTNE(FOBJ,"GET","action",FILEIO.ACTION,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","path",FILEIO.PATH,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","data",FILEIO.DATA,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","dosletter",FILEIO.DOSLETTER,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","newline",FILEIO.NEWLINE,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","permissions",FILEIO.PERMISSIONS,"",RERR)þþ*CALL @WOBJ.RTNE(OUTOBJ,"FROMSTRING","","{}","",RERR)þþFILEIO.ACTION=OCONV(FILEIO.ACTION,"MCU")þFILEIO.NEWLINE=OCONV(FILEIO.NEWLINE,"MCU")þþCALL @WOBJ.RTNE(FOBJ,"GET","work.parsed_fileio_file_name",PARSED.FILEIO.FILE.NAME,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","work.fileio_just_path",FILEIO.JUST.PATH,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","work.platform",PLATFORM.TYPE,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","work.mvtype",PLATFORM.MVTYPE,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"GET","work.filedelim",PLATFORM.FILEDELIM,"",RERR)þþ* FOR RIGHT NOW ON JBASE WE WILL JUST OPEN THE FILE USING FULL PATHINGþIF PLATFORM.MV = "WINDOWS" THEN FILEIO.JUST.PATH = "."þþOPENPATH FILEIO.JUST.PATH TO FI ELSEþ    FSTATUS=0þ    FSTATUSMSG="Could not open file ":FILEIO.JUST.PATHþ    GOTO end.of.runþENDþþBEGIN CASEþ    CASE FILEIO.ACTION="READ"þ        GOSUB fileio.readþ    CASE FILEIO.ACTION="WRITE"þ        GOSUB fileio.writeþ    CASE FILEIO.ACTION="DELETE"þ        GOSUB fileio.deleteþ    CASE 1þ        FSTATUS=0þ        FSTATUSMSG="Invalid action"þ        GOTO end.of.runþEND CASEþþend.of.run: *þCALL @WOBJ.RTNE(FOBJ,"SET.NUMBER", "response.status", FSTATUS,"",RERR)þCALL @WOBJ.RTNE(FOBJ,"SET.STRING", "response.statusmsg", FSTATUSMSG, "", RERR)þþþRETURNþþfileio.read: *þþREC=""þþREAD REC FROM FI, PARSED.FILEIO.FILE.NAME ELSEþ    FSTATUS=0þ    FSTATUSMSG="Could not find ":PARSED.FILEIO.FILE.NAMEþENDþþCALL @WOBJ.RTNE(FOBJ,"SET.STRING","response.data",REC,"",RERR)þþIF 0 THENþ    PRINT "PATH   :":FILEIO.JUST.PATHþ    PRINT "ID     :":PARSED.FILEIO.FILE.NAMEþ    PRINT "REC    :":RECþENDþþRETURNþþfileio.write: *þþWRITE FILEIO.DATA ON FI, PARSED.FILEIO.FILE.NAMEþþRETURNþþfileio.delete: *þþDELETE FI, PARSED.FILEIO.FILE.NAMEþþRETURN000387MVDBTOOLKIT.WCALL.DEBUGþ0c2SUBROUTINE MVDBTOOLKIT.WCALL.DEBUG(OBJ)þþCRT "Do you wish to debug wcall? ":; INPUT CONTþIF OCONV(CONT,"MCU")[1,1]="Y" THEN NULL ELSE RETURNþþ* This will do typical debugging workþCALL WOBJ(OBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þCALL WOBJ(OBJ,"GET","response.statusmsg",RESPONSE.STATUS.MSG,"",RERR)þþCRT "Status = ":RESPONSE.STATUS:' ':RESPONSE.STATUS.MSGþ* Show the actual Curl commandþþCALL WOBJ(OBJ,"GET","response.curl_cmnd",CURL.CMND,"",RERR)þþPRINT "Press return to see curl cmnd ":; INPUT CONTþþPRINT CURL.CMNDþþPRINT "Press return to see response ":; INPUT CONTþþPRINT "STATUS: ":RESPONSE.STATUS,RESPONSE.STATUS.MSGþþPRINT "Press return to see response.log":; INPUT CONTþþCALL WOBJ(OBJ,"LENGTH","response.log",LOG.LENGTH,"",RERR)þþFOR X=1 TO LOG.LENGTHþ    CALL WOBJ(OBJ,"GET","response.log[":X-1:"]",LOG.LINE,"",RERR)þ    PRINT LOG.LINEþNEXT XþþRETURNþþ00005EMVDBTOOLKIT.SWAP.DEFAULTþ0c2SUBROUTINE MVDBTOOLKIT.SWAP.DEFAULT(V,F,T)þþV=SWAP(V,F,T)þþRETURNþ00033CMVDBTOOLKIT.WGETENVþ0c2SUBROUTINE MVDBTOOLKIT.WGETENV(VAR.NAME,RETURN.VALUE)þþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþCALL MVDBTOOLKIT.WPLATFORM(POBJ)þþCALL @WOBJ.RTNE(POBJ,"GET","mvtype",PLATFORM.MV,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","filedelim",PLATFORM.DELIM,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","platform",PLATFORM.TYPE,"",RERR)þþ* THIS FUNCTION IS A CROSS PLATFORM WGET VAR FUNCTIONþþþBEGIN CASEþ    CASE PLATFORM.MV="D3" AND PLATFORM.TYPE="LINUX"þ        FILEIO.RTNE="MVDBTOOLKIT.WGETENV.D3"þ        CALL MVDBTOOLKIT.WGETENV.D3(VAR.NAME,RETURN.VALUE)þ    CASE PLATFORM.MV="JBASE"þ        FILEIO.RTNE="MVDBTOOLKIT.WGETENV.JBASE"þ        CALL MVDBTOOLKIT.WGETENV.JBASE(VAR.NAME,RETURN.VALUE)þ    CASE 1þ        CALL MVDBTOOLKIT.WGETENV.GENERIC(VAR.NAME,RETURN.VALUE,PLATFORM.MV,PLATFORM.TYPE)þEND CASEþþend.of.run: *þþRETURNþþ000156MVDBTOOLKIT.WEXECUTE.INCLUDEþ0c2* COMMON FOR EXECUTE *þCOMMON /MVDBWEX/ EXECUTE.COMMANDþCOMMON /MVDBWEX/ EXECUTE.DIRECTORYþCOMMON /MVDBWEX/ EXECUTE.DOCAPTUREþCOMMON /MVDBWEX/ EXECUTE.RETURNINGþCOMMON /MVDBWEX/ EXECUTE.RTNDATAþCOMMON /MVDBWEX/ EXECUTE.PASSLISTþCOMMON /MVDBWEX/ MV.TYPEþCOMMON /MVDBWEX/ PLATFORMþCOMMON /MVDBWEX/ EXECUTE.DEBUGþ000498MVDBTOOLKIT.WEXECUTE.D3þ0c2SUBROUTINE MVDBTOOLKIT.WEXECUTE.D3(EOBJ)þINCLUDE MVDBTOOLKIT.WEXECUTE.INCLUDEþ**********************************************************************þ*þ* Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: June 12, 2018þ* Description: Execute library JBASE VERSIONþ*þ**********************************************************************þINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþE.RESULTS=""þE.RETURNING=""þE.RTNDATA=""þþBEGIN CASEþ    CASE EXECUTE.DOCAPTURE="N"þ        EXECUTE '!':EXECUTE.COMMAND þ    CASE 1þ        EXECUTE '!':EXECUTE.COMMAND CAPTURING E.RESULTþEND CASEþþIF EXECUTE.DEBUG="1"OR OCONV(EXECUTE.DEBUG[1,1],'MCU')='Y' THENþ   WRITE.DEBUG=1þ   OPEN 'RESULT.FILE' TO RFILE ELSE WRITE.DEBUG=0þ   IF WRITE.DEBUG THENþ       WRITE EXECUTE.COMMAND ON RFILE, 'WEXECUTE'þ   ENDþENDþþCONVERT CHAR(0) TO '' IN E.RESULTþCONVERT CHAR(255) TO '' IN E.RESULTþþCALL MVDBTOOLKIT.WPLATFORM(PLATFORMOBJ)þþCALL @WOBJ.RTNE(PLATFORMOBJ,"GET","mvtype",MV.TYPE,"",RERR)þþIF MV.TYPE='UNIDATA' THEN E.RESULT=E.RESULT[1,LEN(E.RESULT)-1]þþCALL @WOBJ.RTNE(EOBJ,"SET.STRING","result.result",E.RESULT,"",RERR)þþRETURN0004E5MVDBTOOLKIT.WGETENV.GENERICþ0c2SUBROUTINE MVDBTOOLKIT.WGETENV.GENERIC(VAR.NAME, RETURN.VALUE, MVTYPE, PLATFORM)þþRETURN.VALUE=""þþ* WE ARE GOING TO JUST SHELL OUT AND GET THE ENVIRONMENT VARIABLE BASEDþ* ON THE PLATFORMþþBEGIN CASEþ    CASE MVTYPE="UNIVERSE" AND PLATFORM="LINUX"þ        CMND='sh -c "echo $':VAR.NAME:'"'þ    CASE MVTYPE="UNIVERSE" AND PLATFORM="WINDOWS"þ        CMND='dos /c "echo %':VAR.NAME:'%"'þ    CASE (MVTYPE="JBASE" OR MVTYPE="D3") AND PLATFORM="LINUX"þ        CMND='!echo $':VAR.NAMEþ    CASE MVTYPE="JBASE" AND PLATFORM="WINDOWS"þ         CMND='echo %':VAR.NAME:'%'þ    CASE MVTYPE="D3" AND PLATFORM="WINDOWS"þ        CMND='!echo %':VAR.NAME:'%'þ    CASE MVTYPE='UNIDATA' AND PLATFORM="WINDOWS"þ        CMND='!echo %':VAR.NAME:'%'þ    CASE MVTYPE='UNIDATA' AND PLATFORM="LINUX"þ        CMND='!echo $':VAR.NAMEþ    CASE MVTYPE='QM' AND PLATFORM="WINDOWS"þ        * QM DOES HAVE SYSTEM(1025) TO GET ENVIRONMENT STUFFþ        * STICKING WITH THIS FOR NOWþ        CMND='!echo %':VAR.NAME:'%'þ    CASE MVTYPE='QM' AND PLATFORM="LINUX"þ        CMND='!echo $':VAR.NAMEþ    CASE 1þ        CMND=''þEND CASEþþEXECUTE CMND CAPTURING RETURN.VALUEþþIF MVTYPE='UNIDATA' THENþ    RETURN.VALUE=RETURN.VALUE[1,LEN(RETURN.VALUE)-1]þENDþþRETURNþ000322MVDBTOOLKIT.EXPAND.PATHþ0c2SUBROUTINE MVDBTOOLKIT.EXPAND.PATH(PASSED.PATH)þþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþCALL MVDBTOOLKIT.WPLATFORM(POBJ)þþCALL @WOBJ.RTNE(POBJ,"GET","mvtype",PLATFORM.MV,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","filedelim",PLATFORM.DELIM,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","platform",PLATFORM.TYPE,"",RERR)þþPARSED.PATH=PASSED.PATHþCONVERT PLATFORM.DELIM TO @AM IN PARSED.PATHþPARSED.PARTS=DCOUNT(PARSED.PATH,@AM)þþFOR P=1 TO PARSED.PARTSþ    THIS.PART=PARSED.PATH<P>þ    IF THIS.PART[1,1]='%' OR THIS.PART[1,1]="$" THENþ        CONVERT '%$' TO '' IN THIS.PARTþ         CALL MVDBTOOLKIT.WGETENV(THIS.PART,NEW.THIS.PART)þ         IF NEW.THIS.PART # "" THEN PARSED.PATH<P>=NEW.THIS.PARTþ    ENDþNEXT PþþCONVERT @AM TO PLATFORM.DELIM IN PARSED.PATHþþPASSED.PATH=PARSED.PATHþþRETURNþþ00002EMVDBTOOLKIT.TEST.INCLUDEþ0c2CMND = SENTENCE()þ0001E1MVDBTOOLKIT.SWAPþ0c2SUBROUTINE MVDBTOOLKIT.SWAP(V,F,T)þþ* MVDBTOOLKIT.SWAPþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþ* PLATFORM INDEPENDENT SWAP COMMANDþCALL MVDBTOOLKIT.WPLATFORM(PLATFORMOBJ)þþCALL @WOBJ.RTNE(PLATFORMOBJ,"GET","mvtype",MV.TYPE,"",RERR)þþBEGIN CASEþ    CASE MV.TYPE='UNIVERSE'þ        CALL MVDBTOOLKIT.SWAP.UNIVERSE(V,F,T)þ    CASE MV.TYPE='UNIDATA'þ        CALL MVDBTOOLKIT.SWAP.UNIDATA(V,F,T)þ    CASE 1þ        CALL MVDBTOOLKIT.SWAP.DEFAULT(V,F,T)þEND CASEþþRETURNþ000C9FMVDBTOOLKIT.PACKAGE.INSTALLERþ0c2      * Install packagesþþ      * first, get a list of packagesþþ      CALL WOBJ(COBJ,"FROMJSON","","{}","",RERR)þþ      CALL MVDBTOOLKIT.WPLATFORM(PLATFORM.OBJ)þþ      CALL WOBJ(PLATFORM.OBJ,"GET","packagesurl",PACKAGES.URL,"",RERR)þþ      IF PACKAGES.URL = "" THENþ         PACKAGES.URL="https://raw.githubusercontent.com/zumasys/MVConnect/master/packages.json"þ      ENDþþ      CALL WOBJ(PLATFORM.OBJ,"GET","mvtype",MVTYPE,"",RERR)þ      þ      MVTYPE=OCONV(MVTYPE,"MCU")þ      þ      BEGIN CASEþ         CASE MVTYPE="D3"; MVTYPE2="d3"þ         CASE MVTYPE="JBASE"; MVTYPE2="jb"þ         CASE MVTYPE="QM"; MVTYPE2="qm"þ         CASE MVTYPE="UNIVERSE"; MVTYPE2="uv"þ         CASE MVTYPE="UNIDATA"; MVTYPE2="ud"þ         CASE 1þ             PRINT "Platform ":MVTYPE:" not supported"þ             STOPþ      END CASEþ      þ      CALL WOBJ(PLATFORM.OBJ,"GET","tmpdir",TMP.DIR,"",RERR)þ      þ      CALL WOBJ(PLATFORM.OBJ,"GET","filedelim",FILEDELIM,"",RERR)þ      þ      PRINT "Packages url: ":PACKAGES.URLþþ      CALL WOBJ(COBJ,"SET","url",PACKAGES.URL,"",RERR)þ      CALL WOBJ(COBJ,"SET","method","GET","",RERR)þþ      CRT "Getting package list...":þþ      CALL MVDBTOOLKIT.WCALL(COBJ)þþ      *CALL MVDBTOOLKIT.WCALL.DEBUG(COBJ)þþþ      CALL WOBJ(COBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þþ      CALL WOBJ(COBJ,"GET","response.statusmsg",RESPONSE.STATUS.MSG,"",RERR)þ      CALL WOBJ(COBJ,"GET","response.data",RESPONSE.DATA,"",RERR)þþ      PRINT RESPONSE.STATUS:' ':RESPONSE.STATUS.MSGþþ      CALL WOBJ(POBJ,"FROMJSON","",RESPONSE.DATA,"",RERR)þþ      IF RERR>0 THENþ         PRINT RERR<1>:" Error: ":RERR<2>þ         STOPþ      ENDþþ      CALL WOBJ(POBJ,"LENGTH","packages",NUMBER.PACKAGES,"",RERR)þþ      PRINT "Number packages: ":NUMBER.PACKAGESþþtop.of.packages: *þþ      PACKAGES=""þ      STOP.PACKAGE.LIST=0þ      PACKAGE=""þ      þ      FOR P=1 TO NUMBER.PACKAGES UNTIL STOP.PACKAGE.LISTþþ         CALL WOBJ(POBJ,"GET","packages[":P-1:"].name",PACKAGE.NAME,"",RERR)þ         CALL WOBJ(POBJ,"GET","packages[":P-1:"].version",PACKAGE.VERSION,"",RERR)þ         CALL WOBJ(POBJ,"GET","packages[":P-1:"].description",PACKAGE.DESCRIPTION,"",RERR)þþþ         PRINT P"MR(#4)":þ         PRINT " ":þ         PRINT PACKAGE.NAME:þ         PACKAGES<P>=PACKAGE.NAMEþ         þ         PRINT " ":þ         PRINT PACKAGE.VERSIONþ         PRINT "     ":PACKAGE.DESCRIPTIONþ         þ         IF NOT(MOD(P,10)) OR P=NUMBER.PACKAGES THENþ             PRINT "Package # to install, return for more, q to quit ":; INPUT PACKAGEþ             IF OCONV(PACKAGE,'MCU')='Q' THEN STOPþ             IF NUM(PACKAGE) THEN STOP.PACKAGE.LIST=1þ         ENDþ      NEXT Pþ      þ      IF PACKAGE="" THEN STOPþ      IF NOT(NUM(PACKAGE)) THENþ           LOCATE PACKAGE IN PACKAGES SETTING PACKAGE ELSE STOPþ      ENDþ      þ      IF PACKAGE < 1 OR PACKAGE > NUMBER.PACKAGES THEN STOPþþ      CALL WOBJ(POBJ,"GET","packages[":PACKAGE-1:"].name",PACKAGE.NAME,"",RERR)þ      CALL WOBJ(POBJ,"GET","packages[":PACKAGE-1:"].version",PACKAGE.VERSION,"",RERR)þþ           þ      COBJ=""þ      CALL WOBJ(COBJ,"FROMSTRING","","{}","",RERR)þ      þ      CALL MVDB.PACKAGE.INSTALLER.SUB(PACKAGE.NAME,RESULT)þ      þ      þSTOPþþ000778MVDBTOOLKIT.WPLATFORMþ0c2      SUBROUTINE MVDBTOOLKIT.WPLATFORM(PLATFORMOBJ)þ      **********************************************************************þ      *þ      * Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ      *þ      * Written by: Patrick Payne, Zumasysþ      * Date: June 12, 2018þ      * Description: WPLATFORM OBJþ      *þ      **********************************************************************þ      *þ      *þ      * PLATFORMOBJþ      *þ      * {þ      *   "platform":" WINDOWS OR LINUX",þ      *   "mvtype"  :" JBASE, D3, UNIDATA, UNIVERSE, OPENQM",þ      *   "tmpdir"  :"tmp dir"þ      * }þþ      * nEW lINEþþ      INCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþ      þ      USE.DICT=1þ      OPEN "DICT","MVDBTOOLKIT.BP" TO DICT.MVDBTOOLKIT.BP ELSE USE.DICT=0þþ      IF USE.DICT THENþ         READ PLATFORMOBJ.JSON FROM DICT.MVDBTOOLKIT.BP, "MV.PLATFORM.JSON" ELSE PLATFORMOBJ.JSON=""þ      ENDþþ      OPEN "MD" TO FI.MD ELSEþ         OPEN "VOC" TO FI.MD ELSE RETURNþ      ENDþþ      * 02/06/2020 - Changed md item name to MV.PLATFORM.JSON to make it not tied to this packageþ      þ      IF PLATFORMOBJ.JSON="" THENþ         CRT "No MV.PLATFORM.JSON IN MD!!!"þ         STOPþ      ENDþþ      CONVERT CHAR(254) TO '' IN PLATFORMOBJ.JSONþ      CALL @WOBJ.RTNE(PLATFORMOBJ,"FROMSTRING","",PLATFORMOBJ.JSON,"",RERR)þþ      * 9/2/2019 PAP - We now figure out filedelim vs passing it in original config filedelimþþ      CALL @WOBJ.RTNE(PLATFORMOBJ,"GET","platform",PLATFORM,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORMOBJ,"GET","mvtype",MV.TYPE,"",RERR)þ      IF PLATFORM="WINDOWS" THEN DELIM = "\" ELSE DELIM = "/"þ      CALL @WOBJ.RTNE(PLATFORMOBJ,"SET","filedelim",DELIM,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORMOBJ,"GET","tmpdir",TMP.DIR,"",RERR)þþ      CALL @WOBJ.RTNE(PLATFORMOBJ,"TOSTRING","",OUT.JSON,"PRETTIFY",RERR)þ      WRITE OUT.JSON ON DICT.MVDBTOOLKIT.BP, "MV.PLATFORM.JSON"þþ      RETURN0006D0MVDBTOOLKIT.ENCODEþ0c2SUBROUTINE MVDBTOOLKIT.ENCODE(IN.STR,OUT.STR)þ**********************************************************************þ*þ* Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: December 2017þ* Description: encode json stringþ*þ**********************************************************************þ***þ* THIS PROGRAM WILL CONVERT ALL BAD CHARACTERS TO AN ESCAPED CHARACTERþ***þEQU CR TO CHAR(13), LF TO CHAR(10), TB TO CHAR(9), BS TO CHAR(8), FF TO CHAR(12)þNL = CR:LFþþPRETTIFYCR=""þ*þ*OPEN 'RESULT.FILE' TO RFILE ELSE STOPþ* WE NEED TO ENCODEþ* " = \"   (34)þ* \ = \\    (92)þ* / = \/þ* CHAR(7) = \bþ* CHAR(13) = \rþ* char(10) = \nþ* char(12) = \fþ* char(9)  = \tþOUT.STR=''þL=LEN(IN.STR)þCONVERT @AM TO LF IN IN.STR; * LETS SWITCH 254 TO LF BE DEFAULTþFOR X=1 TO Lþ    C=IN.STR[X,1]þ    SEQ.C=SEQ(C)þ    ENCODE=0þ    *IF SEQ.C < 32 THEN ENCODE=1; * BELOW SPACEþ    *IF SEQ.C > 32 AND SEQ.C < 48 THEN ENCODE=1; * LETS ENCODE ALL OF THIS !@$%^&*()þ    IF SEQ.C=34 THEN ENCODE=1þ    IF SEQ.C=92 THEN ENCODE=1þ    * IF SEQ.C=47 THEN ENCODE=1þ    *IF SEQ.C > 126 THEN ENCODE = 1; * LETS ENCODE ALL THE HIGH ENTRIESþ    *IF SEQ.C >= 91 AND SEQ.C <= 96 THEN ENCODE=1þ    IF ENCODE THENþ        BEGIN CASEþ            CASE SEQ.C=7; OUT.STR='\b'þ            CASE C='\'; OUT.STR:='\\'þ                *CASE C='/'; OUT.STR:='\/'þ            CASE C='"'; OUT.STR:='\"'þ            CASE SEQ.C=10þ                OUT.STR:='\n'þ                IF PRETTIFYCR THEN OUT.STR:=NLþ            CASE SEQ.C=13; OUT.STR:='\r'þ            CASE SEQ.C=12; OUT.STR:='\f'þ            CASE 1; OUT.STR:='\u00':OCONV(C,'MX0C')þ        END CASEþ    END ELSEþ        OUT.STR=OUT.STR:Cþ    ENDþNEXT XþRETURNþEND002ACDMVDBTOOLKIT.WCALLþ0c2SUBROUTINE MVDBTOOLKIT.WCALL(PASSED.WOBJ)þ**********************************************************************þ*þ* Copyright (C) 2018 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: June 15, 2018þ* Description: WCALL Libraryþþ**********************************************************************þ*þ* @WOBJ.RTNEþ* { "method":"GET,PUT,POST,ETC",þ*    "url":"URL TO CALL",þ*    "headers": { "HEADERNAME":"VALUE", "HEADERNAME":"VALUE" },þ*    "outputfile: "Optional output file, wcall will write the output to this file vs response.data",þ*    "body":"BODY",þ*    "formfields": [þ*         {þ*            "name":"field name",þ*            "value":"field value",þ*            "fieldtype":"blank or file" for nowþ*         }þ*     ],þ*    "datafields": [þ*         {þ*            "name":"field name",þ*            "value":"field value",þ*            "fieldtype":"blank or file" for nowþ*         }þ*     ],þ*    "insecure":"Yes,Y,YES - Sets the -k on curl",þ*    "timeout": ## (default is 45),þ*    "options":"options to add to curl command",þ*    "debug":"Y or N",þ*    "response": {þ*        "result":"RESULT",þ*        "status":"STATUS",þ*        "statusmsg":"STATUS MSG",þ*        "http_type": "http type",þ*        "curl_cmnd":"Actual curl command created",þ*         "error": "error",þ*         "log": [ "log output line1", "log output line 2" ],þ*        "headers": { "headername":"header value","headername2":"headervalue" }þ*    }þ*  }þINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþCALL MVDBTOOLKIT.WPLATFORM(POBJ)þþCALL @WOBJ.RTNE(POBJ,"GET","mvtype",MV.TYPE,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","platform",PLATFORM,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","filedelim",FILE.DELIM,"",RERR)þCALL @WOBJ.RTNE(POBJ,"GET","curllocation",CURLLOCATION,"",RERR); * change #19þþIF MV.TYPE="" THENþ   CALL @WOBJ.RTNE(POBJ,"GET","error",THIS.ERROR,"",RERR)þ   PRINT "NO MV TYPE: ":THIS.ERRORþ   RETURNþENDþþITEMS.TO.DELETE=""; * PATH TO EACH FILE TO DELETEþþCALL @WOBJ.RTNE(POBJ,"GET","tmpdir",TMP.DIR,"",RERR)þþCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","debug",DO.DEBUG,"",RERR)þIF OCONV(DO.DEBUG[1,1],"MCU")="Y" OR DO.DEBUG="1" THEN DO.DEBUG=1 ELSE DO.DEBUG=""þCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","method",WEB.METHOD,"",RERR)þ* 7/22/2020 PAP Set default MethodþIF WEB.METHOD="" THEN WEB.METHOD="GET"þþCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","url",WEB.URL,"",RERR)þCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","body",WEB.BODY,"",RERR)þCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","timeout",WEB.TIMEOUT,"",RERR)þCALL @WOBJ.RTNE(PASSED.WOBJ,"KEYS","headers",WEB.HEADERS,"",RERR)þIF NOT(WEB.TIMEOUT) THEN WEB.TIMEOUT=45þCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","insecure",WEB.INSECURE,"",RERR)þIF OCONV(WEB.INSECURE[1,1],'MCU') = "Y" THEN WEB.INSECURE=1 ELSE WEB.INSECURE=0þþCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.OBJECT","response","{}","",RERR)þþIF TMP.DIR="" THENþ BEGIN CASEþ    CASE PLATFORM="LINUX"þ       TMP.DIR="/tmp"þ    CASE INDEX(PLATFORM,"WINDOWS",1) AND MV.TYPE="JBASE"þ       TMP.DIR="%HOME%"þ    CASE INDEX(PLATFORM,"WINDOWS",1)þ       TMP.DIR="%USERPROFILE%\AppData\Local\Temp"þ    CASE 1þ       TMP.DIR="/tmp"þ END CASEþENDþþCALL MVDBTOOLKIT.EXPAND.PATH(TMP.DIR)þþ* 4/6/2020 - Change #19.  þIF CURLLOCATION # "" THENþ   CMND=CURLLOCATIONþEND ELSEþ   CMND="curl"þENDþCMND:=" -s"þCMND:=' -m ':WEB.TIMEOUTþCMND:=' -X ':WEB.METHODþCALL @WOBJ.RTNE(PASSED.WOBJ,"GET","options",WEB.OPTIONS,"",RERR)þIF WEB.OPTIONS # "" THENþ   CMND:=' ':WEB.OPTIONSþENDþþWEB.NUM.HEADERS=DCOUNT(WEB.HEADERS,@SVM)þþFOR H=1 TO WEB.NUM.HEADERSþ   HEADER.NAME=WEB.HEADERS<1,1,H>þ   CALL @WOBJ.RTNE(PASSED.WOBJ,"GET","headers.":HEADER.NAME,HEADER.VALUE,"",RERR)þ   CALL MVDBTOOLKIT.ENCODE(HEADER.VALUE,ENCODED.HEADER.VALUE)þ   CMND:=' -H "':HEADER.NAME:': ':ENCODED.HEADER.VALUE:'"'þNEXT HþþUSER.NO=FIELD(OCONV('','U50BB'),' ',1)þSESSION.ID="WCALL-":USER.NOþþTMP.DIR:=FILE.DELIMþþ* add in dumping of headersþCMND:=\ -D "\:TMP.DIR:SESSION.ID:\.headers"\þþITEMS.TO.DELETE<-1>=TMP.DIR:SESSION.ID:'.headers'þþ* write out stderrþCMND:=\ -v --stderr "\:TMP.DIR:SESSION.ID:\.stderr"\þþITEMS.TO.DELETE<-1>=TMP.DIR:SESSION.ID:\.stderr\þþCALL @WOBJ.RTNE(FOBJ,"FROMSTRING","","{}","",RERR)þþSAVE.FOBJ=FOBJþþIF WEB.BODY # "" THENþ   *CALL @WOBJ.RTNE(EOBJ,"SET.ARRAY","data","[]","",RERR)þ   *CALL @WOBJ.RTNE(EOBJ,"SET.STRING","data[0]",WEB.BODY,"",RERR)þþþ   CALL @WOBJ.RTNE(FOBJ,"SET","action","WRITE","",RERR)þ   CALL @WOBJ.RTNE(FOBJ,"SET","data",WEB.BODY,"",RERR)þ   CALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.DIR:SESSION.ID:'.body',"",RERR)þ   ITEMS.TO.DELETE<-1>=TMP.DIR:SESSION.ID:'.body'þþ   CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ   CMND:=' --data-binary "@':TMP.DIR:SESSION.ID:'.body"'þ   *CMND:='  --data-binary @-'þENDþþ* form fields *þCALL @WOBJ.RTNE(PASSED.WOBJ,"LENGTH","formfields",NUM.FORMFIELDS,"",RERR)þþFOR X=1 TO NUM.FORMFIELDSþ P="formfields[":X-1:"]"þ CALL @WOBJ.RTNE(PASSED.WOBJ,"GET",P:'.name',FIELD.NAME,"",RERR)þ CALL @WOBJ.RTNE(PASSED.WOBJ,"GET",P:'.value',FIELD.VALUE,"",RERR)þ CALL @WOBJ.RTNE(PASSED.WOBJ,"GET",P:'.fieldtype',FIELD.TYPE,"",RERR)þ IF TRIM(FIELD.NAME) # "" THENþ    * < > @ ALL MEAN SPECIAL THINGS WITH A -F.  If that exists in the file you needþ    * to use --form-stringþ    BEGIN CASEþ       CASE INDEX(FIELD.VALUE,CHAR(13),1) OR INDEX(FIELD.VALUE,CHAR(10),1)þ         * WE NEED TO WRITE THIS OUT!þ         TMP.CMND="-F "þ            CALL @WOBJ.RTNE(FOBJ,"SET","action","WRITE","",RERR)þ            CALL @WOBJ.RTNE(FOBJ,"SET","data",FIELD.VALUE,"",RERR)þ            CALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.DIR:SESSION.ID:'.field':X-1,"",RERR)þ            ITEMS.TO.DELETE<-1>=TMP.DIR:SESSION.ID:'.field':X-1þ            FIELD.VALUE="@":TMP.DIR:SESSION.ID:'.field':X-1þ            CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ         * NEED TO WRITE THE CONTENT OUT TO A TMP FILE *þþ       CASE INDEX(FIELD.VALUE,'!',1) OR INDEX(FIELD.VALUE,'<',1) OR INDEX(FIELD.VALUE,'>',1) OR INDEX(FIELD.VALUE,'@',1) OR INDEX(FIELD.VALUE,'$',1) AND FIELD.TYPE # "file"þ         TMP.CMND="--form-string "þ       CASE 1þ         TMP.CMND="-F "þ    END CASEþ    TMP.CMND:=FIELD.NAME:'="'þ    TMP.CMND:=FIELD.VALUE:'"'þ    CMND:=' ':TMP.CMNDþ ENDþNEXT Xþþ* form fields *þCALL @WOBJ.RTNE(PASSED.WOBJ,"LENGTH","datafields",NUM.FORMFIELDS,"",RERR)þþFOR X=1 TO NUM.FORMFIELDSþ      P="datafields[":X-1:"]"þ      CALL @WOBJ.RTNE(PASSED.WOBJ,"GET",P:'.name',FIELD.NAME,"",RERR)þ      CALL @WOBJ.RTNE(PASSED.WOBJ,"GET",P:'.value',FIELD.VALUE,"",RERR)þ      CALL @WOBJ.RTNE(PASSED.WOBJ,"GET",P:'.fieldtype',FIELD.TYPE,"",RERR)þ      CALL MVDBTOOLKIT.SWAP(FIELD.VALUE,'@','%40')þ      CALL MVDBTOOLKIT.SWAP(FIELD.VALUE,'$','%24')þ      CALL MVDBTOOLKIT.SWAP(FIELD.VALUE,'/','%2F')þ      CALL MVDBTOOLKIT.SWAP(FIELD.VALUE,':','%3A')þþ      IF TRIM(FIELD.NAME) # "" THENþ         TMP.CMND="-d "þ         TMP.CMND:=FIELD.NAME:'="'þ         TMP.CMND:=FIELD.VALUE:'"'þ         CMND:=' ':TMP.CMNDþ      ENDþNEXT Xþ* NOW ADD THE URLþþCALL MVDBTOOLKIT.SWAP(WEB.URL,' ','%20')þCALL MVDBTOOLKIT.SWAP(WEB.URL,'@','%40')þCALL MVDBTOOLKIT.SWAP(WEB.URL,'$','%24')þ*WEB.URL=SWAP(WEB.URL,'/','%2F')þþCMND:=' "':WEB.URL:'"'þþ* CALL WEXECUTEþþCALL @WOBJ.RTNE(EOBJ,"FROMSTRING","","{}","",RERR)þ þCALL @WOBJ.RTNE(EOBJ,"SET","command",CMND,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"SET","debug",DO.DEBUG,"",RERR); * LAY IN DEBUGGING PARAMþþIF WEB.BODY # "" THENþ   * CALL @WOBJ.RTNE(EOBJ,"SET","data[0]",WEB.BODY,"",RERR)þENDþþCALL MVDBTOOLKIT.WEXECUTE(EOBJ); * DO THE CALLþþ* READ IN THE HEADERSþþCALL @WOBJ.RTNE(FOBJ,"FROMSTRING","","{}","",RERR)þCALL @WOBJ.RTNE(FOBJ,"SET","action","READ","",RERR)þCALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.DIR:SESSION.ID:".headers","",RERR)þCALL MVDBTOOLKIT.WFILEIO(FOBJ)þþCALL @WOBJ.RTNE(FOBJ,"GET","response.data",RESPONSE.HEADERS,"",RERR)þþCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.headers",RESPONSE.HEADERS,"",RERR)þþ* Lets break the headers down into an arrayþþCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.OBJECT","response.headers","{}","",RERR)þþNUM.HEADERS=DCOUNT(RESPONSE.HEADERS,@AM)þþHTTP.TYPE=''; HTTP.STATUS.CODE=''; HTTP.MSG=''þþFOR H=1 TO NUM.HEADERSþ   HEADER.LINE=RESPONSE.HEADERS<H>þþ   IF HEADER.LINE[1,4]="HTTP" AND NOT(INDEX(HEADER.LINE,":",1)) THENþ      HTTP.TYPE=FIELD(HEADER.LINE,' ',1)þ      HTTP.STATUS.CODE=FIELD(HEADER.LINE,' ',2)þ      HTTP.STATUS.MSG=FIELD(HEADER.LINE,' ',3,99)þ   END ELSEþ      HEADER.NAME=TRIM(FIELD(HEADER.LINE,':',1))þ      CONVERT CHAR(13):CHAR(10) TO '' IN HEADER.NAME; * CATCHES BLANK LINESþ      HEADER.VALUE=FIELD(HEADER.LINE,':',2,999999)þ      IF  HEADER.VALUE[1,1]=' ' THEN HEADER.VALUE=HEADER.VALUE[2,LEN(HEADER.VALUE)]; * messy left trimþ      CONVERT CHAR(13):CHAR(10) TO '' IN HEADER.VALUE; * STRIP AN NEW LINESþ      IF HEADER.NAME # "" THENþ         * NOW PUT THE HEADER INTO OUR ARRAYþ         CALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.headers.":HEADER.NAME,HEADER.VALUE,"",RERR)þ      ENDþ   ENDþNEXT HþþCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.NUMBER","response.status",HTTP.STATUS.CODE,"",RERR)þCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.http_type",HTTP.TYPE,"",RERR)þCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.statusmsg",HTTP.STATUS.MSG,"",RERR)þþ* READ IN STDERR (LOG) AND POST AS A ARRAYþþFOBJ=SAVE.FOBJþCALL @WOBJ.RTNE(FOBJ,"SET","action","READ","",RERR)þCALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.DIR:SESSION.ID:'.stderr',"",RERR)þCALL MVDBTOOLKIT.WFILEIO(FOBJ)þCALL @WOBJ.RTNE(FOBJ,"GET","response.data",RESPONSE.STDERR,"",RERR)þþCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.ARRAY","response.log","[]","",RERR)þþCONVERT CHAR(13) TO @AM IN RESPONSE.STDERRþCONVERT CHAR(10) TO "" IN RESPONSE.STDERRþNUM.LINES=DCOUNT(RESPONSE.STDERR,@AM)þþ* 4/2/2020 pap  - Look for bad curl statement!!þþGOOD.CURL=1þCURL.BAD.MSG=""þþFOR L=1 TO NUM.LINESþ    LINE=RESPONSE.STDERR<L>þ    BEGIN CASEþ      CASE INDEX(LINE,'curl:',1)þ         * LETS CAPTURE THE FIRST ONEþ         IF CURL.BAD.MSG = "" THEN CURL.BAD.MSG=TRIM(FIELD(LINE,':',2,999))þ         GOOD.CURL=0þ      CASE INDEX(LINE,'warning:',1)þ    END CASEþ    CALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.log[-1]",LINE,"",RERR)þNEXT LþþIF NOT(GOOD.CURL) THENþ   CALL @WOBJ.RTNE(PASSED.WOBJ,"SET.NUMBER","response.status","400","",RERR)þ   CALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.statusmsg",CURL.BAD.MSG,"",RERR)þENDþþ*CALL @WOBJ.RTNE(EOBJ,"TOSTRING","",TEST.JSON,"PRETTIFY",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","result.result",EXECUTE.RESULT,"",RERR)þCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.data",EXECUTE.RESULT,"",RERR)þþend.of.call: *þþ* XDELETE REQUIRED FILESþþNUM.ITEMS.TO.DELETE=DCOUNT(ITEMS.TO.DELETE,@AM)þþFOR I=1 TO NUM.ITEMS.TO.DELETEþ      ITEM.TO.DELETE=ITEMS.TO.DELETE<I>þ      FOBJ=SAVE.FOBJþ      CALL @WOBJ.RTNE(FOBJ,"SET","action","DELETE","",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"SET","path",ITEM.TO.DELETE,"",RERR)þ      IF DO.DEBUG THENþ         CRT "Normally trying to delete: ":ITEM.TO.DELETEþ      END ELSEþ         CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ      ENDþNEXT IþþCALL @WOBJ.RTNE(PASSED.WOBJ,"SET.STRING","response.curl_cmnd",CMND,"",RERR)þþRETURNþþ000F60MVDB.PACKAGE.INSTALLER.SUBþ0c2SUBROUTINE MVDB.PACKAGE.INSTALLER.SUB(PACKAGE,RESULT)þþ      * Install packagesþþ      * first, get a list of packagesþþ      CALL WOBJ(COBJ,"FROMJSON","","{}","",RERR)þþ      CALL MVDBTOOLKIT.WPLATFORM(PLATFORM.OBJ)þþ      CALL WOBJ(PLATFORM.OBJ,"GET","packagesurl",PACKAGES.URL,"",RERR)þþ      IF PACKAGES.URL = "" THENþ         PACKAGES.URL="https://raw.githubusercontent.com/zumasys/MVConnect/master/packages.json"þ      ENDþþ      CALL WOBJ(PLATFORM.OBJ,"GET","mvtype",MVTYPE,"",RERR)þ      þ      MVTYPE=OCONV(MVTYPE,"MCU")þ      þ      BEGIN CASEþ         CASE MVTYPE="D3"; MVTYPE2="d3"þ         CASE MVTYPE="JBASE"; MVTYPE2="jb"þ         CASE MVTYPE="QM"; MVTYPE2="qm"þ         CASE MVTYPE="UNIVERSE"; MVTYPE2="uv"þ         CASE MVTYPE="UNIDATA"; MVTYPE2="ud"þ         CASE 1þ             PRINT "Platform ":MVTYPE:" not supported"þ             RETURNþ      END CASEþ      þ      CALL WOBJ(PLATFORM.OBJ,"GET","tmpdir",TMP.DIR,"",RERR)þ      þ      CALL WOBJ(PLATFORM.OBJ,"GET","filedelim",FILEDELIM,"",RERR)þ      þ      *PRINT "Packages url: ":PACKAGES.URLþþ      CALL WOBJ(COBJ,"SET","url",PACKAGES.URL,"",RERR)þ      CALL WOBJ(COBJ,"SET","method","GET","",RERR)þþ      *CRT "Getting package list...":þþ      CALL MVDBTOOLKIT.WCALL(COBJ)þþ      *CALL MVDBTOOLKIT.WCALL.DEBUG(COBJ)þþþ      CALL WOBJ(COBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þþ      CALL WOBJ(COBJ,"GET","response.statusmsg",RESPONSE.STATUS.MSG,"",RERR)þ      CALL WOBJ(COBJ,"GET","response.data",RESPONSE.DATA,"",RERR)þþ      *PRINT RESPONSE.STATUS:' ':RESPONSE.STATUS.MSGþþ      CALL WOBJ(POBJ,"FROMJSON","",RESPONSE.DATA,"",RERR)þþ      IF RERR>0 THENþ         PRINT RERR<1>:" Error: ":RERR<2>þ         RETURNþ      ENDþþ      CALL WOBJ(POBJ,"LENGTH","packages",NUMBER.PACKAGES,"",RERR)þþ      *PRINT "Number packages: ":NUMBER.PACKAGESþþtop.of.packages: *þþ      PACKAGES=""þ      þ      FOR P=1 TO NUMBER.PACKAGESþþ         CALL WOBJ(POBJ,"GET","packages[":P-1:"].name",PACKAGE.NAME,"",RERR)þ         CALL WOBJ(POBJ,"GET","packages[":P-1:"].version",PACKAGE.VERSION,"",RERR)þþ       *  PRINT P"MR(#4)":þ       *  PRINT " ":þ       *  PRINT PACKAGE.NAME:þ         PACKAGES<P>=PACKAGE.NAMEþ         þ       *  PRINT " ":þ       *  PRINT PACKAGE.VERSIONþ      NEXT Pþþ      *PRINT "Package # to install or return to quit ":; INPUT PACKAGEþ      þ      IF PACKAGE="" THEN STOPþ      IF NOT(NUM(PACKAGE)) THENþ           LOCATE PACKAGE IN PACKAGES SETTING PACKAGE ELSE STOPþ      ENDþ      þ      IF PACKAGE < 1 OR PACKAGE > NUMBER.PACKAGES THEN STOPþþ      CALL WOBJ(POBJ,"GET","packages[":PACKAGE-1:"].name",PACKAGE.NAME,"",RERR)þ      CALL WOBJ(POBJ,"GET","packages[":PACKAGE-1:"].version",PACKAGE.VERSION,"",RERR)þþ      PRINT "Installing ":PACKAGE.NAME:" ":PACKAGE.VERSIONþ      þ      PRINT "Platform ":MVTYPE:' ':MVTYPE2þ      PRINT "Temp Directory: ":TMP.DIRþ      PRINT "O/S delim: ":FILEDELIMþ      þ      COBJ=""þ      CALL WOBJ(COBJ,"FROMSTRING","","{}","",RERR)þ      þ      PACKAGE.FILE.NAME=PACKAGE.NAME:"-":MVTYPE2:".pkg"þ      þ      URL="https://raw.githubusercontent.com/zumasys/MVConnect/master/packages/":MVTYPE2þ      URL:="/":PACKAGE.FILE.NAMEþ      þ      PRINT URLþ      þ      FULL.PACKAGE.PATH=TMP.DIR:FILEDELIM:PACKAGE.FILE.NAMEþ      þ      PRINT "Downloading ":URL:" to ":FULL.PACKAGE.PATHþ      þ      CALL WOBJ(COBJ,"SET","url",URL,"",RERR)þ      CALL WOBJ(COBJ,"SET","method","GET","",RERR)þ      CALL WOBJ(COBJ,"SET","options"," -o ":TMP.DIR:FILEDELIM:PACKAGE.FILE.NAME,"",RERR)þ      þ      CALL MVDBTOOLKIT.WCALL(COBJ)þ      *CALL MVDBTOOLKIT.WCALL.DEBUG(COBJ)þ      þ      CALL WOBJ(COBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þþ      CALL WOBJ(COBJ,"GET","response.statusmsg",RESPONSE.STATUS.MSG,"",RERR)þ      þ      PRINT "Response: ":RESPONSE.STATUS,RESPONSE.STATUS.MSGþ      þ      DATA FULL.PACKAGE.PATHþ      EXECUTE 'MVDBTOOLKIT.APP.INSTALLER'þ      þ      þRETURNþþ000169MVDBTOOLKIT.SWAP.UNIVERSEþ0c2SUBROUTINE MVDBTOOLKIT.SWAP.UNIVERSE(V,F,T)þþIF F=T THEN RETURNþIF F='' THEN RETURNþþ* Let's do this manually since Universe Exchange does NOT workþCNTR=0þLOOPþ   CNTR+=1þ   POS=INDEX(V,F,1)þUNTIL NOT(POS) OR CNTR > 100000 DOþþ   PRE.STRING=V[1,POS-1]þ   AFT.STRING=V[POS+LEN(F),LEN(V)]þ   V=PRE.STRING:T:AFT.STRINGþþREPEATþþRETURNþ00018CMVDBTOOLKIT.WOBJ.CHOOSE.WOBJþ0c2* Code to determine default wobj library to useþþ* This needs to change for MVDBTOOLKIT build, defaults to WOBJþþWOBJ.RTNE="WOBJ"þþNO.MD.FILE=0þþOPEN "MD" TO FILE.MD ELSEþ    OPEN "VOC" TO FILE.MD ELSE NO.MD.FILE=1þENDþþIF NOT(NO.MD.FILE) THENþ    READ WOBJ.CONF FROM FILE.MD, "WOBJ.CONF" ELSE WOBJ.CONF=""þþ    IF WOBJ.CONF<3> # "" THEN WOBJ.RTNE=WOBJ.CONF<3>þEND0001BCMVDBTOOLKIT.WGETENV.D3þ0c2SUBROUTINE MVDBTOOLKIT.WGETENV.D3(VAR.NAME, RETURN.VALUE)þþRETURN.VALUE=""þþ* Gets and displays the PATH environment variableþcfunction unix.builtinþpointer=(char*)%getenv(VAR.NAME)þþif pointer = 0 thenþ   RETURN.VALUE=""þend elseþ* We got a C pointer the path variable. Copy itþ* into pick variableþ   char path[1024]þ   %strcpy(path, (char*)pointer)þ   path = field(path,char(0),1)þ   RETURN.VALUE=pathþendþþRETURNþþ003E86MVDBTOOLKIT.CONFIGþ0c2      PRINT @(-1):"MVDBTOOLKIT.CONFIG"þ      PRINTþþ      COMMON /MVMKCOM/ MVMAKE.SUB.COMMON.INFOþþ      MVMAKE.SUB.COMMON.INFO=""; * DO NOT USE FOR THIS VERSIONþþ      IF MVMAKE.SUB.COMMON.INFO="" OR MVMAKE.SUB.COMMON.INFO = "0" THENþ         *    CRT "MVDBTOOLKIT.CONFIG MUST BE CALLED FROM MVMAKE"þ         *    STOPþ      ENDþþ      INCLUDE MVDBTOOLKIT.TEST.INCLUDEþþ      INCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþ      OPEN "DICT","MVDBTOOLKIT.BP" TO DICT.MVDBTOOLKIT.BP ELSE STOPþþ      * 4/29/2020 - pap - This entire excercise it to get MV.PLATFORM.JSON populated theþ      *                   first time.  MVMAKE already asked the questions, if the file didþ      *                   not exist those answers will be passed to use via the common.þ      *                   The reason mvmake cannot fix this is the file to the dictionaryþ      *                   is created later.  If MVmake tries to write it out it has toþ      *                   read it in properly due to items this process populates, such asþ      *                   TMPDIR.  If the package does not properly install thenþ      *                   WOBJ may not be available.  Better to do it all here.þ      *þ      *                   Therefore we manually read the file, update PLATFORM and MVTYPEþ      *                   and write it back.  We then call WPLATFORM and move on as normalþþ      READ PLATFORM.JSON FROM DICT.MVDBTOOLKIT.BP, "MV.PLATFORM.JSON" ELSE PLATFORM.JSON="{}"þ      IF TRIM(PLATFORM.JSON) = "" THEN PLATFORM.JSON="{}"þþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"FROMSTRING","",PLATFORM.JSON,"",RERR)þþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","platform",PLATFORM,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","mvtype",MVTYPE,"",RERR)þþ      IF MVMAKE.SUB.COMMON.INFO<2> # "" THEN PLATFORM=MVMAKE.SUB.COMMON.INFO<2>þ      IF MVMAKE.SUB.COMMON.INFO<3> # "" THEN MVTYPE=MVMAKE.SUB.COMMON.INFO<3>þþþþ      IF PLATFORM="" OR MVTYPE="" THENþ         ** LETS FIGURE OUT THE PLATFORM **þ         EXECUTE 'jdiag' CAPTURING RESULTþ         RESULT=OCONV(RESULT,"MCU")þ         IF INDEX(RESULT,'JBASE',1) THENþ            MVTYPE="JBASE"þ            OS.POS=INDEX(RESULT,"OS RELEASE",1)þ            OS.TYPE=RESULT[OS.POS,9999]þ            OS.TYPE=OS.TYPE<1,1,1>þ            OS.TYPE=OCONV(OS.TYPE,"MCU")þ            IF INDEX(OS.TYPE,"WINDOWS",1) THENþ               PLATFORM="WINDOWS"þ            END ELSEþ               PLATFORM="LINUX"þ            ENDþ            GOTO end.of.mvtypeþ         ENDþþ         EXECUTE 'WHICH' CAPTURING RESULTþ         RESULT=OCONV(RESULT,"MCU")þ         IF INDEX(RESULT,"D3",1) THENþ            MVTYPE="D3"þ            IF INDEX(RESULT,"WINDOWS",1) THENþ               PLATFORM="WINDOWS"þ            END ELSEþ               PLATFORM="LINUX"þ            ENDþ            GOTO end.of.mvtypeþ         ENDþþ         EXECUTE 'CT ERRMSG 335 (N' CAPTURING RESULTþ         IF INDEX(OCONV(RESULT,"MCU"),"MVBASE",1) THENþ            MVTYPE="MVBASE"; * NOT SUPPORTEDþ            GOTO end.of.mvtypeþ         ENDþþ         EXECUTE "VERSION" CAPTURING RESULTþ         IF INDEX(OCONV(RESULT,"MCU"),"UNIDATA",1) THENþ            MVTYPE="UNIDATA"þ            EXECUTE '!SET' CAPTURING OS.TYPEþ            OS.TYPE=OCONV(OS.TYPE,'MCU')þ            IF INDEX(OS.TYPE,"WINDIR",1) THENþ               PLATFORM="WINDOWS"þ            END ELSEþ               PLATFORM="LINUX"þ            ENDþ            GOTO end.of.mvtypeþ         ENDþþ         EXECUTE "CT VOC QM.ACCOUNTS" CAPTURING RESULTþ         IF INDEX(OCONV(RESULT,"MCU"),"QMSYS",1) THENþ            MVTYPE="QM"þ            EXECUTE '!SET' CAPTURING OS.TYPEþ            OS.TYPE=OCONV(OS.TYPE,'MCU')þ            IF INDEX(OS.TYPE,"WINDIR",1) THENþ               PLATFORM="WINDOWS"þ            END ELSEþ               PLATFORM="LINUX"þ            ENDþ            GOTO end.of.mvtypeþ         ENDþþ         EXECUTE 'CT VOC UVPROMPT' CAPTURING RESULTþ         IF INDEX(OCONV(RESULT,"MCU"),"1 V",1) THENþ            MVTYPE="UNIVERSE"þ            EXECUTE 'sh -c "pwd"' CAPTURING RESULTþ            IF INDEX(OCONV(RESULT,"MCU"),"NOT AVAILABLE",1) THENþ               PLATFORM="WINDOWS"þ            END ELSEþ               PLATFORM="LINUX"þ            ENDþ            GOTO end.of.mvtypeþ         ENDþþend.of.mvtype: *þþ         IF PLATFORM="" THENþ            PRINT "NO PLATFORM FOUND"; STOPþ            PRINT "ENTER PLATFORM (LINUX OR WINDOWS)[":PLATFORM:"]: ":; INPUT TMP.ANSþ            IF TMP.ANS # "" THEN PLATFORM=TMP.ANSþþ            PLATFORM=OCONV(PLATFORM,"MCU")þþ            BEGIN CASEþ               CASE PLATFORM="WINDOWS"þ                  D3.PREFIX="dos"þ                  PLATFORM.DELIM="\"þ               CASE PLATFORM="LINUX"þ                  D3.PREFIX="unix"þ                  PLATFORM.DELIM="/"þ               CASE 1þ                  CRT "Invalid Platform ":PLATFORM; STOPþ            END CASEþ         ENDþþ         IF MVTYPE="" THENþ            PRINT "NO MVTYPE FOUND"; STOPþ            PRINT "ENTER MVTYPE (JBASE, QM, D3, UNIVERSE, UNIDATA)[":MVTYPE:"] ":; INPUT TMP.ANSþ            IF TMP.ANS # "" THEN MVTYPE = TMP.ANSþþ            MVTYPE=OCONV(MVTYPE,"MCU")þþ            BEGIN CASEþ               CASE MVTYPE="JBASE"þ               CASE MVTYPE="QM"þ               CASE MVTYPE="D3"þ               CASE MVTYPE="UNIVERSE"þ               CASE MVTYPE="UNIDATA"þ               CASE 1þ                  CRT "Invalid MVTYPE"; STOPþ            END CASEþ         ENDþþ      ENDþþ      MVMAKE.SUB.COMMON.INFO<1>='REBUILD'þ      MVMAKE.SUB.COMMON.INFO<2>=PLATFORMþ      MVMAKE.SUB.COMMON.INFO<3>=MVTYPEþþ      PRINT "Platform:      ":PLATFORMþ      PRINT "MV type :      ":MVTYPEþ      PRINTþþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","platform",PLATFORM,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","mvtype",MVTYPE,"",RERR)þþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","platform",MVMAKE.SUB.COMMON.INFO<2>,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","mvtype",MVMAKE.SUB.COMMON.INFO<3>,"",RERR)þþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"TOSTRING","",PLATFORM.JSON,"PRETTIFY",RERR)þ      CONVERT CHAR(13) TO @AM IN PLATFORM.JSONþ      CONVERT CHAR(10) TO '' IN PLATFORM.JSONþ      WRITE PLATFORM.JSON ON DICT.MVDBTOOLKIT.BP, "MV.PLATFORM.JSON"þþ      CALL MVDBTOOLKIT.WPLATFORM(PLATFORM.OBJ)þþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","platform",PLATFORM,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","mvtype",MVTYPE,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","filedelim",FILEDELIM,"",RERR)þþ      IF PLATFORM = "" THENþ         CRT "No platform configured!!!"; STOPþ      ENDþþ      IF MVTYPE = "" THENþ         CRT "No MVType configured!!!"; STOPþ      ENDþþ      * GET ENVIRONMENTþþ      * Let get our current directoryþ      TEST="pwd"; GOSUB start.testþ      IF OCONV(PLATFORM,"MCU") = "WINDOWS" THENþ         CMND='echo %CD%'þ      END ELSEþ         CMND='pwd'þ      ENDþþ      CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ      CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ      CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ      CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þ      CONVERT CHAR(13):CHAR(10) TO '' IN CMND.RESULTþ      TEST.STATUS=1þ      TEST.MSG=CMND.RESULTþ      GOSUB end.testþþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","tmpdir",TMP.PATH,"",RERR)þþ      IF TMP.PATH="" THENþþ         IF MVMAKE.SUB.COMMON.INFO<5>="" THEN MVMAKE.SUB.COMMON.INFO<5>="mvdbtoolkit"þþIF MVTYPE="QM" THENþ    EXECUTE '!mkdir TMP'þENDþ         BEGIN CASEþ            CASE MVTYPE="D3" AND PLATFORM="LINUX"þ               * DANG D3 HAS IT'S OWN DANG FILE SYSTEM, LETS JUST CREATE A TMP DIR AND MOVEþ               TMP.PATH="/tmp"þ            CASE MVTYPE="D3" AND PLATFORM="LINUX"þ               TMP.DATH="c:\tmp"þ               EXECUTE '!mkdir c:\tmp'þ            CASE OCONV(MVMAKE.SUB.COMMON.INFO<5>,"MCU") = "MVDBTOOLKIT"þ               * WE HAVE RELATIVE POSITIONINGþ               TMP.PATH=CMND.RESULT:FILEDELIM:"TMP"þ               MVDBTOOLKIT.LOCATION=CMND.RESULTþ            CASE 1þ               TMP.PATH=MVMAKE.SUB.COMMON.INFO<5>:FILEDELIM:"TMP"þ               MVDBTOOLKIT.LOCATION=MVMAKE.SUB.COMMON.INFO<5>þ         END CASEþþ      ENDþþþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","tmpdir",TMP.PATH,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","mvdbtoolkitlocation",MVDBTOOLKIT.LOCATION,"",RERR)þ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","curllocation",CURLLOCATION,"",RERR)þþ      TEST='tmpdir'; GOSUB start.testþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"GET","tmpdir",TMP.DIR,"",RERR)þ      TEST.MSG=TMP.DIRþ      TEST.STATUS=1þ      IF TMP.DIR="" THEN TEST.STATUS=0þ      GOSUB end.testþþþ      TEST='MVDBTOOLKIT.SWAP'þ      GOSUB start.testþ      S='TEST LINE TEST LINE'þ      ORIG.STRING=Sþ      CALL MVDBTOOLKIT.SWAP(S,"ES","XX")þ      IF S = "TXXT LINE TXXT LINE" THEN TEST.STATUS=1 ELSE TEST.STATUS=0þ      TEST.MSG=Sþ      GOSUB end.testþþ      * Test 1 Getenvþþ      TEST="getenv"þ      GOSUB start.testþ      CALL MVDBTOOLKIT.WGETENV("PATH",PATH)þ      IF PATH # "" THENþ         TEST.MSG=PATH[1,60]þ         TEST.STATUS=1þ      END ELSEþ         TEST.MSG=""þ         TEST.STATUS=0þ      ENDþ      GOSUB end.testþþ      * Test WEXECUTEþþ      TEST="wexecute"; GOSUB start.testþ      CMND='echo MVDBTOOLKIT.TEST'þþ      CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ      CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ      CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ      CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ      IF INDEX(CMND.RESULT,"MVDBTOOLKIT.TEST",1) THENþ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=1þ      END ELSEþ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=0þ      ENDþ      CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ      GOSUB end.testþþ      * Test WFILEIOþþ      TEST="WFILEIO-WRITE"þþ      USER.NO=FIELD(OCONV('','U50BB'),' ',1)þ      GOSUB start.testþ      CALL @WOBJ.RTNE(FOBJ,"FROMSTRING","","{}","",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"SET","action","WRITE","",RERR)þ      TMP.FILE.NAME=TMP.DIR:FILEDELIM:'TMP-':USER.NO:'.txt'þ      TEST.MSG=TMP.FILE.NAMEþþ      CALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.FILE.NAME,"",RERR)þ      SAVE.FOBJ=FOBJþ      TMP.DATA=TIMEDATE()þ      CALL @WOBJ.RTNE(FOBJ,"SET","data",TMP.DATA,"",RERR)þ      CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ      CALL @WOBJ.RTNE(FOBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","response.statusmsg",RESPONSE.STATUS.MSG,"",RERR)þ      TEST.STATUS=RESPONSE.STATUSþ      IF NOT(RESPONSE.STATUS) THEN TEST.MSG:=RESPONSE.STATUS.MSGþ      GOSUB end.testþþ      IF NOT(TEST.STATUS) THEN STOP "Test Failed, no reason to continue"þþ      TEST='WFILEIO-READ'þ      GOSUB start.testþþ      * NOW READ IT BACK INþ      CALL @WOBJ.RTNE(FOBJ,"SET","action","READ","",RERR)þ      CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ      CALL @WOBJ.RTNE(FOBJ,"GET","response.data",RESPONSE.DATA,"",RERR)þþ      TEST.MSG="(":TMP.DATA:')=(':RESPONSE.DATA:")"þ      TEST.STATUS=1þ      IF TMP.DATA # RESPONSE.DATA THEN TEST.STATUS=0þ      GOSUB end.testþþ      TEST="WFILEIO-DELETE"; GOSUB start.testþ      FOBJ=SAVE.FOBJþ      CALL @WOBJ.RTNE(FOBJ,"SET","action","DELETE","",RERR)þ      CALL MVDBTOOLKIT.WFILEIO(FOBJ)þþ      FOBJ=SAVE.FOBJþ      CALL @WOBJ.RTNE(FOBJ,"SET","action","READ","",RERR)þ      CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ      RESPONSE.DATA=""þþ      CALL @WOBJ.RTNE(FOBJ,"GET","response.data",RESPONSE.DATA,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","response.status",RESPONSE.STATUS,"",RERR)þ      CALL @WOBJ.RTNE(FOBJ,"GET","response.statusmsg",RESPONSE.STATUSMSG,"",RERR)þ      TEST.STATUS=1þ      TEST.MSG=TMP.FILE.NAME:' ':RESPONSE.STATUSþ      IF RESPONSE.STATUS=0 AND RESPONSE.DATA="" THEN NULL ELSE TEST.STATUS=0þ      GOSUB end.testþþ      * Let get our current directoryþ      TEST="pwd"; GOSUB start.testþ      IF OCONV(PLATFORM,"MCU") = "WINDOWS" THENþ         CMND='echo %CD%'þ      END ELSEþ         CMND='pwd'þ      ENDþþ      CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ      CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ      CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ      CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ      IF 1 THENþ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=1þ      END ELSEþ         TEST.MSG=CMND.RESULTþ         TEST.STATUS=0þ      ENDþ      CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ      GOSUB end.testþþ      MVDBTOOLKIT.LOCATION = CMND.RESULTþþ      * Lets verify we have curl!!!þþ      IF CURLLOCATION="" THEN CURLLOCATION="curl"þþ      TEST="default curl"; GOSUB start.testþ      CMND=CURLLOCATION:' -V'þþ      CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ      CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ      CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ      CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ      BEGIN CASEþ         CASE INDEX(CMND.RESULT,"libcurl",1) AND 1þ            TEST.MSG=CMND.RESULTþ            TEST.STATUS=1þ         CASE OCONV(PLATFORM,"MCU")="WINDOWS"þ            TEST.MSG=CMND.RESULTþ            CURLLOCATION=""þ            TEST.STATUS=2þ         CASE 1þ            TEST.MSG=0þ      END CASEþþ      CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ      GOSUB end.testþþ      * THIS IS SLOPPY CODEþþ      IF CURLLOCATION="" AND PLATFORM="WINDOWS" THENþ         * Start looking for curlþ         IF TEST.STATUS=2 THENþ            CURLLOCATION="C:\PROGRA~2\Zumasys\MVDASH~1\bin\curl.exe"þ            TEST="curl via mvconnect"; GOSUB start.testþ            CMND=CURLLOCATION:' -V'þþ            CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ            CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ            CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ            CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ            BEGIN CASEþ               CASE INDEX(CMND.RESULT,"libcurl",1) AND 1þ                  TEST.MSG=CMND.RESULTþ                  TEST.STATUS=1þ               CASE OCONV(PLATFORM,"MCU")="WINDOWS"þ                  TEST.MSG=CMND.RESULTþ                  TEST.STATUS=2þ               CASE 1þ                  TEST.MSG=CMND.RESULTþ                  TEST.STATUS=0þ            END CASEþþ            CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ            GOSUB end.testþ         ENDþþ         IF TEST.STATUS=2 THENþ            CURLLOCATION="c:\progra~1\git\mingw64\bin\curl.exe"þþ            TEST="curl via git"; GOSUB start.testþ            CMND=CURLLOCATION:' -V'þþ            CALL @WOBJ.RTNE(COBJ,"FROMSTRING","","{}","",RERR)þ            CALL @WOBJ.RTNE(COBJ,"SET","command",CMND,"",RERR)þ            CALL MVDBTOOLKIT.WEXECUTE(COBJ)þ            CALL @WOBJ.RTNE(COBJ,"GET","result.result",CMND.RESULT,"",RERR)þþ            BEGIN CASEþ               CASE INDEX(CMND.RESULT,"libcurl",1) AND 0þ                  TEST.MSG=CMND.RESULTþ                  TEST.STATUS=1þ               CASE 1þ                  TEST.STATUS=0þ                  TEST.MSG=CMNDþþ            END CASEþþ            CONVERT CHAR(13):CHAR(10) TO '' IN TEST.MSGþ            GOSUB end.testþ         ENDþþ         IF CURLLOCATION # "" THENþ            CALL @WOBJ.RTNE(PLATFORM.OBJ,"SET","curllocation",CURLLOCATION,"",RERR)þ         ENDþþ      ENDþþþ      CALL @WOBJ.RTNE(PLATFORM.OBJ,"TOSTRING","",PLATFORM.JSON,"PRETTIFY",RERR)þ      CONVERT CHAR(13) TO @AM IN PLATFORM.JSONþ      CONVERT CHAR(10) TO '' IN PLATFORM.JSONþþ      WRITE PLATFORM.JSON ON DICT.MVDBTOOLKIT.BP, "MV.PLATFORM.JSON"þþ      STOPþ      *þ      RETURNþ      *þprocess.error: *þ      IF RERR<1> THENþ         TEST.STATUS=-1þ         TEST.MSG=RERR<1>þ      ENDþ      RETURNþ      *þ      *þstart.test: *þ      TEST.STATUS=0þ      TEST.MSG="Success"þ      PRINT "":TEST[1,15]"L(#15)":þ      RETURNþ      *þend.test: *þ      PRINT "  ":TEST.MSG[1,50]"L(#50)":þ      PRINT " ":þ      PRE=''; AFT=''þ      BEGIN CASEþ         CASE TEST.STATUS=2; ERROR="Warning"; PRE=''; AFT=''þ         CASE TEST.STATUS; ERROR="Passed"þ         CASE 1; ERROR="Failed"; PRE=@(-13); AFT=@(-14)þ      END CASEþ      PRINT PRE:"[":þ      PRINT ERROR"L(#7)":þ      PRINT "]":AFTþ      RETURNþþþþ000CA7MVDBTOOLKIT.WEXECUTEþ0c2SUBROUTINE MVDBTOOLKIT.WEXECUTE(EOBJ)þINCLUDE MVDBTOOLKIT.WEXECUTE.INCLUDEþ**********************************************************************þ*þ* Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: June 12, 2018þ* Description: Execute libraryþ*þ**********************************************************************þ*þ* EOBJþ* { "command":"COMMAND TO USE",þ*    "directory":"OPTIONAL DIRECTORY TO RUN IN",þ*    "debug":"YES OR NO",þ*    "docapture":"YES OR NO, DEFAULT YES",þ*    "returning":"YES OR NO, DEFAULT YES",þ*    "rtndata":"YES OR NO, DEFAULT NO",þ*    "passlist":"ACTUAL PASSLIST"þ*    "data": ["ARRAY OF DATA STATEMENTS"],þ*    "result: {wþ*                "result":"RESULT IF CAPTURED",þ*                "rtndata":"RESULT OF RTNDATA",þ*                "returning":"RESULT OF RETURNING",þ*                "debug":"DEBUG INFORMATION IF TURNED ON"þ*    }þ*    }þINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþ* With native objects we cannot do this.  We will needþ* a platform specific way of recognizing this.þ* Perhaps changes itself to WOBJ?þþIF ''="NEW" THENþ    * CREATE A NEW OBJECT AND RETURN ITþ    EJSON=\{ "command":"",\þ    EJSON:=\ "directory":"",\þ    EJSON:=\ "debug":"NO",\þ    EJSON:=\ "returning":"YES",\þ    EJSON:=\ "rtndata":"YES",\þ    EJSON:=\ "passlist":"",\þ    EJSON:=\ "data: []"\þ    EJSON:=\}\þþ    CALL @WOBJ.RTNE(EOBJ,"FROMSTRING","",EJSON,"",RERR)þ    RETURNþENDþþCALL @WOBJ.RTNE(EOBJ,"GET","command"      ,EXECUTE.COMMAND        ,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","directory"    ,EXECUTE.DIRECTORY      ,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","docapture"    ,EXECUTE.DOCAPTURE      ,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","returning"    ,EXECUTE.RETURNING      ,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","rtndata"      ,EXECUTE.RTNDATA        ,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","passlist"     ,EXECUTE.PASSLIST       ,"",RERR)þCALL @WOBJ.RTNE(EOBJ,"GET","debug"        ,EXECUTE.DEBUG          ,"",RERR)þIF EXECUTE.DEBUG = "" THENþ    CALL @WOBJ.RTNE(EOBJ,"GET","DEBUG",EXECUTE.DEBUG,"",RERR)þENDþþIF OCONV(EXECUTE.DEBUG[1,1],"MCU") = "Y" OR EXECUTE.DEBUG="1" THEN EXECUTE.DEBUG=1 ELSE EXECUTE.DEBUG=0þþIF EXECUTE.DEBUG THENþ    *CRT "EXECUTE.COMMAND: ":EXECUTE.COMMANDþ    *CRT "DIRECTORY      : ":EXECUTE.DIRECTORYþ    *CRT "OCAPTURE       : ":EXECUTE.OCAPTUREþ    *CRT "RETURNING      : ":EXECUTE.RETURNINGþENDþþCALL @WOBJ.RTNE(EOBJ,"TOSTRING","",TEST.JSON,"",RERR)þþþ* ERROR HANDLING TODOþþCALL @WOBJ.RTNE(EOBJ,"SET.OBJECT","result","{}","",RERR)þþCALL MVDBTOOLKIT.WPLATFORM(PLATFORMOBJ)þþCALL @WOBJ.RTNE(PLATFORMOBJ,"GET","mvtype",MV.TYPE,"",RERR)þþBEGIN CASEþ   CASE MV.TYPE='D3'þ       CALL MVDBTOOLKIT.WEXECUTE.D3(EOBJ)þ   CASE MV.TYPE='UNIDATA'þ       CALL MVDBTOOLKIT.WEXECUTE.UNIDATA(EOBJ)þ   CASE MV.TYPE="QM"þ       CALL MVDBTOOLKIT.WEXECUTE.QM(EOBJ)þ   CASE MV.TYPE="JBASE"þ       CALL MVDBTOOLKIT.WEXECUTE.JBASE(EOBJ)þ   CASE MV.TYPE="UNIVERSE"þ       CALL MVDBTOOLKIT.WEXECUTE.UNIVERSE(EOBJ)þ   CASE 1þ        CALL @WOBJ.RTNE(EOBJ,"SET","result.error","Invalid mvplatform=":MV.TYPE,"",RERR)þEND CASEþ*þ*EXECUTE CHAR(255):'k':CMND CAPTURING RESULTþ*CONVERT CHAR(0) TO '' IN RESULTþ*CONVERT CHAR(255) TO '' IN RESULTþRETURNþ000A9FMVDBTOOLKIT.WEXECUTE.UNIVERSEþ0c2SUBROUTINE MVDBTOOLKIT.WEXECUTE.UNIVERSE(EOBJ)þINCLUDE MVDBTOOLKIT.WEXECUTE.INCLUDEþ**********************************************************************þ*þ* Copyright (C) 2017 Zumasys, Inc., All Rights Reservedþ*þ* Written by: Patrick Payne, Zumasysþ* Date: June 12, 2018þ* Description: Execute library UNIVERSE VERSIONþ*þ**********************************************************************þþINCLUDE MVDBTOOLKIT.WOBJ.CHOOSE.WOBJþþE.RESULTS=""þE.RETURNING=""þE.RTNDATA=""þþITEMS.TO.DELETE=''þþCALL @WOBJ.RTNE(EOBJ,"GET","debug",DO.DEBUG,"",RERR)þþIF OCONV(DO.DEBUG[1,1],"MCU") = "Y" OR DO.DEBUG="1" THEN DO.DEBUG=1 ELSE DO.DEBUG=""þþDO.DEBUG=1þCALL @WOBJ.RTNE(EOBJ,"LENGTH","data",NUM.DATA,"",RERR)þþFOR X=1 TO NUM.DATAþ    CALL @WOBJ.RTNE(EOBJ,"GET","data[":X-1:"]",THIS.DATA,"",RERR)þ    *PRINT "DATA: ":THIS.DATAþ    DATA THIS.DATAþNEXT XþþCALL MVDBTOOLKIT.WPLATFORM(PLATFORMOBJ)þþCALL @WOBJ.RTNE(PLATFORMOBJ,"GET","platform",PLATFORM,"",RERR)þþIF PLATFORM="WINDOWS" THEN PRE.CMND="dos /c" ELSE PRE.CMND="sh -c"þþ*IF PLATFORM="WINDOWS" THENþIF INDEX(EXECUTE.COMMAND,'"',1) OR INDEX(EXECUTE.COMMAND,'$',1) THENþ   *CALL MVDBTOOLKIT.SWAP.UNIVERSE(EXECUTE.COMMAND,'$','')þ   * LETS WRITE THIS OUT AND ADJUST THE COMMAND TO EXECUTE THAT BATCH FILEþ   IF PLATFORM="WINDOWS" THEN EXTENSION=".bat" ELSE EXTENSION=".sh"þ   CALL @WOBJ.RTNE(PLATFORMOBJ,"GET","tmpdir",TMP.DIR,"",RERR)þ   CALL @WOBJ.RTNE(PLATFORMOBJ,"GET","filedelim",FILE.DELIM,"",RERR)þ   þþ   CALL MVDBTOOLKIT.EXPAND.PATH(TMP.DIR)þ   TMP.DIR:=FILE.DELIMþþ   USER.NO=FIELD(OCONV('','U50BB'),' ',1)þ   SESSION.ID="WEXECUTE-":USER.NOþþ   CALL @WOBJ.RTNE(FOBJ,"FROMSTRING","","{}","",RERR)þ   CALL @WOBJ.RTNE(FOBJ,"SET","action","WRITE","",RERR)þ   CALL @WOBJ.RTNE(FOBJ,"SET","data",EXECUTE.COMMAND,"",RERR)þ   CALL @WOBJ.RTNE(FOBJ,"SET","path",TMP.DIR:SESSION.ID:EXTENSION,"",RERR)þþ   ITEMS.TO.DELETE<-1>=TMP.DIR:SESSION.ID:EXTENSIONþþ   CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ   þ   þ   EXECUTE.COMMAND = TMP.DIR:SESSION.ID:EXTENSIONþ   þENDþþBEGIN CASEþ    CASE EXECUTE.DOCAPTURE="N"þ        EXECUTE PRE.CMND:\ "\:EXECUTE.COMMAND:\"\ þ    CASE 1þ        EXECUTE PRE.CMND:\ "\:EXECUTE.COMMAND:\"\ CAPTURING E.RESULTþEND CASEþþCONVERT CHAR(0) TO '' IN E.RESULTþCONVERT CHAR(255) TO '' IN E.RESULTþþL=LEN(E.RESULT)þIF E.RESULT[L,1] = CHAR(254) THEN E.RESULT=E.RESULT[1,L-1]þCALL @WOBJ.RTNE(EOBJ,"SET.STRING","result.result",E.RESULT,"",RERR)þþIF NOT(DO.DEBUG) THENþ   IF ITEMS.TO.DELETE # "" THENþ       CALL @WOBJ.RTNE(FOBJ,"SET","action","DELETE","",RERR)þ       CALL MVDBTOOLKIT.WFILEIO(FOBJ)þ   ENDþENDþþIF DO.DEBUG THENþ   OPENPATH "/tmp" TO TMP.FILE ELSE RETURNþ   WRITE EXECUTE.COMMAND ON TMP.FILE, "wexecute.sh"þENDþþþRETURN000137MV.INSTALL.CFþ0c0000050MVAPPS-PRE-SCRIPTþ0c0PTERM CASE NOINVERTþCREATE-FILE MVDBTOOLKIT.BP 3,1,18 5,1,1000076MVAPPS-POST-SCRIPTþ0c0BASIC MVDBTOOLKIT.BP *þCATALOG MVDBTOOLKIT.BP *þCREATE-FILE TMP 1,1,19 1,1,19þMVDBTOOLKIT.CONFIG00004EPACKAGE.INFOþ0c0MVDBTOOLKIT Cross Platform MV toolsþ1.0.0þdbþþþMVDBTOOLKITþ196